// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "doImgproc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic doImgproc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic doImgproc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> doImgproc::ap_ST_fsm_state1 = "1";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage4 = "100000";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage5 = "1000000";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage6 = "10000000";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage7 = "100000000";
const sc_lv<13> doImgproc::ap_ST_fsm_pp0_stage8 = "1000000000";
const sc_lv<13> doImgproc::ap_ST_fsm_state15 = "10000000000";
const sc_lv<13> doImgproc::ap_ST_fsm_state16 = "100000000000";
const sc_lv<13> doImgproc::ap_ST_fsm_state17 = "1000000000000";
const sc_lv<32> doImgproc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool doImgproc::ap_const_boolean_1 = true;
const sc_lv<1> doImgproc::ap_const_lv1_0 = "0";
const sc_lv<1> doImgproc::ap_const_lv1_1 = "1";
const sc_lv<2> doImgproc::ap_const_lv2_0 = "00";
const sc_lv<2> doImgproc::ap_const_lv2_2 = "10";
const sc_lv<2> doImgproc::ap_const_lv2_3 = "11";
const sc_lv<2> doImgproc::ap_const_lv2_1 = "1";
const sc_lv<32> doImgproc::ap_const_lv32_3 = "11";
const bool doImgproc::ap_const_boolean_0 = false;
const sc_lv<32> doImgproc::ap_const_lv32_4 = "100";
const sc_lv<32> doImgproc::ap_const_lv32_B = "1011";
const sc_lv<32> doImgproc::ap_const_lv32_C = "1100";
const int doImgproc::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> doImgproc::ap_const_lv32_2 = "10";
const sc_lv<32> doImgproc::ap_const_lv32_5 = "101";
const sc_lv<32> doImgproc::ap_const_lv32_6 = "110";
const sc_lv<32> doImgproc::ap_const_lv32_1 = "1";
const sc_lv<32> doImgproc::ap_const_lv32_7 = "111";
const sc_lv<32> doImgproc::ap_const_lv32_8 = "1000";
const sc_lv<32> doImgproc::ap_const_lv32_9 = "1001";
const sc_lv<17> doImgproc::ap_const_lv17_1 = "1";
const sc_lv<8> doImgproc::ap_const_lv8_0 = "00000000";
const sc_lv<32> doImgproc::ap_const_lv32_A = "1010";
const sc_lv<64> doImgproc::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> doImgproc::ap_const_lv64_1 = "1";
const sc_lv<64> doImgproc::ap_const_lv64_2 = "10";
const sc_lv<64> doImgproc::ap_const_lv64_3 = "11";
const sc_lv<64> doImgproc::ap_const_lv64_4 = "100";
const sc_lv<64> doImgproc::ap_const_lv64_5 = "101";
const sc_lv<64> doImgproc::ap_const_lv64_6 = "110";
const sc_lv<64> doImgproc::ap_const_lv64_7 = "111";
const sc_lv<64> doImgproc::ap_const_lv64_8 = "1000";
const sc_lv<17> doImgproc::ap_const_lv17_12C01 = "10010110000000001";
const sc_lv<32> doImgproc::ap_const_lv32_1F = "11111";
const sc_lv<31> doImgproc::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> doImgproc::ap_const_lv32_EF = "11101111";
const sc_lv<17> doImgproc::ap_const_lv17_F1 = "11110001";
const sc_lv<32> doImgproc::ap_const_lv32_F = "1111";
const sc_lv<17> doImgproc::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> doImgproc::ap_const_lv32_10 = "10000";
const sc_lv<15> doImgproc::ap_const_lv15_0 = "000000000000000";
const sc_lv<32> doImgproc::ap_const_lv32_E = "1110";
const sc_lv<8> doImgproc::ap_const_lv8_F1 = "11110001";
const sc_lv<8> doImgproc::ap_const_lv8_1 = "1";
const sc_lv<8> doImgproc::ap_const_lv8_EF = "11101111";

doImgproc::doImgproc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    doImgproc_CRTL_BUS_s_axi_U = new doImgproc_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("doImgproc_CRTL_BUS_s_axi_U");
    doImgproc_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    doImgproc_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    doImgproc_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    doImgproc_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    doImgproc_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    doImgproc_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    doImgproc_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    doImgproc_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    doImgproc_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    doImgproc_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    doImgproc_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    doImgproc_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    doImgproc_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    doImgproc_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    doImgproc_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    doImgproc_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    doImgproc_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    doImgproc_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    doImgproc_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    doImgproc_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    doImgproc_CRTL_BUS_s_axi_U->ap_start(ap_start);
    doImgproc_CRTL_BUS_s_axi_U->interrupt(interrupt);
    doImgproc_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    doImgproc_CRTL_BUS_s_axi_U->ap_done(ap_done);
    doImgproc_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    doImgproc_KERNEL_BUS_s_axi_U = new doImgproc_KERNEL_BUS_s_axi<C_S_AXI_KERNEL_BUS_ADDR_WIDTH,C_S_AXI_KERNEL_BUS_DATA_WIDTH>("doImgproc_KERNEL_BUS_s_axi_U");
    doImgproc_KERNEL_BUS_s_axi_U->AWVALID(s_axi_KERNEL_BUS_AWVALID);
    doImgproc_KERNEL_BUS_s_axi_U->AWREADY(s_axi_KERNEL_BUS_AWREADY);
    doImgproc_KERNEL_BUS_s_axi_U->AWADDR(s_axi_KERNEL_BUS_AWADDR);
    doImgproc_KERNEL_BUS_s_axi_U->WVALID(s_axi_KERNEL_BUS_WVALID);
    doImgproc_KERNEL_BUS_s_axi_U->WREADY(s_axi_KERNEL_BUS_WREADY);
    doImgproc_KERNEL_BUS_s_axi_U->WDATA(s_axi_KERNEL_BUS_WDATA);
    doImgproc_KERNEL_BUS_s_axi_U->WSTRB(s_axi_KERNEL_BUS_WSTRB);
    doImgproc_KERNEL_BUS_s_axi_U->ARVALID(s_axi_KERNEL_BUS_ARVALID);
    doImgproc_KERNEL_BUS_s_axi_U->ARREADY(s_axi_KERNEL_BUS_ARREADY);
    doImgproc_KERNEL_BUS_s_axi_U->ARADDR(s_axi_KERNEL_BUS_ARADDR);
    doImgproc_KERNEL_BUS_s_axi_U->RVALID(s_axi_KERNEL_BUS_RVALID);
    doImgproc_KERNEL_BUS_s_axi_U->RREADY(s_axi_KERNEL_BUS_RREADY);
    doImgproc_KERNEL_BUS_s_axi_U->RDATA(s_axi_KERNEL_BUS_RDATA);
    doImgproc_KERNEL_BUS_s_axi_U->RRESP(s_axi_KERNEL_BUS_RRESP);
    doImgproc_KERNEL_BUS_s_axi_U->BVALID(s_axi_KERNEL_BUS_BVALID);
    doImgproc_KERNEL_BUS_s_axi_U->BREADY(s_axi_KERNEL_BUS_BREADY);
    doImgproc_KERNEL_BUS_s_axi_U->BRESP(s_axi_KERNEL_BUS_BRESP);
    doImgproc_KERNEL_BUS_s_axi_U->ACLK(ap_clk);
    doImgproc_KERNEL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    doImgproc_KERNEL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    doImgproc_KERNEL_BUS_s_axi_U->kernel_address0(kernel_address0);
    doImgproc_KERNEL_BUS_s_axi_U->kernel_ce0(kernel_ce0);
    doImgproc_KERNEL_BUS_s_axi_U->kernel_q0(kernel_q0);
    lineBuff_val_0_U = new doImgproc_lineBufbkb("lineBuff_val_0_U");
    lineBuff_val_0_U->clk(ap_clk);
    lineBuff_val_0_U->reset(ap_rst_n_inv);
    lineBuff_val_0_U->address0(lineBuff_val_0_address0);
    lineBuff_val_0_U->ce0(lineBuff_val_0_ce0);
    lineBuff_val_0_U->we0(lineBuff_val_0_we0);
    lineBuff_val_0_U->d0(lineBuff_val_1_q0);
    lineBuff_val_0_U->q0(lineBuff_val_0_q0);
    lineBuff_val_0_U->address1(lineBuff_val_0_address1);
    lineBuff_val_0_U->ce1(lineBuff_val_0_ce1);
    lineBuff_val_0_U->q1(lineBuff_val_0_q1);
    lineBuff_val_1_U = new doImgproc_lineBufbkb("lineBuff_val_1_U");
    lineBuff_val_1_U->clk(ap_clk);
    lineBuff_val_1_U->reset(ap_rst_n_inv);
    lineBuff_val_1_U->address0(lineBuff_val_1_address0);
    lineBuff_val_1_U->ce0(lineBuff_val_1_ce0);
    lineBuff_val_1_U->we0(lineBuff_val_1_we0);
    lineBuff_val_1_U->d0(lineBuff_val_2_q0);
    lineBuff_val_1_U->q0(lineBuff_val_1_q0);
    lineBuff_val_1_U->address1(lineBuff_val_1_address1);
    lineBuff_val_1_U->ce1(lineBuff_val_1_ce1);
    lineBuff_val_1_U->q1(lineBuff_val_1_q1);
    lineBuff_val_2_U = new doImgproc_lineBufbkb("lineBuff_val_2_U");
    lineBuff_val_2_U->clk(ap_clk);
    lineBuff_val_2_U->reset(ap_rst_n_inv);
    lineBuff_val_2_U->address0(lineBuff_val_2_address0);
    lineBuff_val_2_U->ce0(lineBuff_val_2_ce0);
    lineBuff_val_2_U->we0(lineBuff_val_2_we0);
    lineBuff_val_2_U->d0(inStream_V_data_V_0_data_out);
    lineBuff_val_2_U->q0(lineBuff_val_2_q0);
    lineBuff_val_2_U->address1(lineBuff_val_2_address1);
    lineBuff_val_2_U->ce1(lineBuff_val_2_ce1);
    lineBuff_val_2_U->q1(lineBuff_val_2_q1);
    doImgproc_mac_muleOg_U1 = new doImgproc_mac_muleOg<1,1,8,8,16,16>("doImgproc_mac_muleOg_U1");
    doImgproc_mac_muleOg_U1->din0(kernel_q0);
    doImgproc_mac_muleOg_U1->din1(grp_fu_904_p1);
    doImgproc_mac_muleOg_U1->din2(window_val_0_0_reg_1152);
    doImgproc_mac_muleOg_U1->dout(grp_fu_904_p3);
    doImgproc_mac_muleOg_U2 = new doImgproc_mac_muleOg<1,1,8,8,16,16>("doImgproc_mac_muleOg_U2");
    doImgproc_mac_muleOg_U2->din0(kernel_q0);
    doImgproc_mac_muleOg_U2->din1(grp_fu_911_p1);
    doImgproc_mac_muleOg_U2->din2(grp_fu_911_p2);
    doImgproc_mac_muleOg_U2->dout(grp_fu_911_p3);
    doImgproc_mac_mulfYi_U3 = new doImgproc_mac_mulfYi<1,1,8,8,16,16>("doImgproc_mac_mulfYi_U3");
    doImgproc_mac_mulfYi_U3->din0(kernel_q0);
    doImgproc_mac_mulfYi_U3->din1(grp_fu_919_p1);
    doImgproc_mac_mulfYi_U3->din2(tmp2_reg_1182);
    doImgproc_mac_mulfYi_U3->dout(grp_fu_919_p3);
    doImgproc_mac_muleOg_U4 = new doImgproc_mac_muleOg<1,1,8,8,16,16>("doImgproc_mac_muleOg_U4");
    doImgproc_mac_muleOg_U4->din0(kernel_q0);
    doImgproc_mac_muleOg_U4->din1(grp_fu_926_p1);
    doImgproc_mac_muleOg_U4->din2(window_val_1_1_reg_1132);
    doImgproc_mac_muleOg_U4->dout(grp_fu_926_p3);
    doImgproc_mac_muleOg_U5 = new doImgproc_mac_muleOg<1,1,8,8,16,16>("doImgproc_mac_muleOg_U5");
    doImgproc_mac_muleOg_U5->din0(kernel_q0);
    doImgproc_mac_muleOg_U5->din1(grp_fu_933_p1);
    doImgproc_mac_muleOg_U5->din2(window_val_2_1_reg_1172);
    doImgproc_mac_muleOg_U5->dout(grp_fu_933_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_accumulator_2_2_2_i_fu_790_p2);
    sensitive << ( tmp7_fu_782_p2 );
    sensitive << ( tmp4_fu_786_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_01001);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );

    SC_METHOD(thread_ap_block_pp0_stage2_11001);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_01001);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_pp0_stage5);

    SC_METHOD(thread_ap_block_pp0_stage5_11001);

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);

    SC_METHOD(thread_ap_block_pp0_stage6);

    SC_METHOD(thread_ap_block_pp0_stage6_11001);

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);

    SC_METHOD(thread_ap_block_pp0_stage7);

    SC_METHOD(thread_ap_block_pp0_stage7_11001);

    SC_METHOD(thread_ap_block_pp0_stage7_subdone);

    SC_METHOD(thread_ap_block_pp0_stage8);

    SC_METHOD(thread_ap_block_pp0_stage8_11001);

    SC_METHOD(thread_ap_block_pp0_stage8_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage8_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state12_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state13_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state14_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( exitcond_fu_885_p2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage2_iter0);
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( exitcond1_reg_985 );

    SC_METHOD(thread_ap_block_state5_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage7_iter0);

    SC_METHOD(thread_ap_condition_1859);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( or_cond_reg_1004 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond1_fu_526_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_col_assign_phi_fu_460_p4);
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( col_assign_reg_456 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( idxCol_1_reg_1107 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_countWait_phi_fu_494_p4);
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( countWait_reg_490 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( phitmp_reg_1197 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_idxRow_phi_fu_471_p4);
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( idxRow_reg_467 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( idxRow_1_reg_1021 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_pixConvolved_phi_fu_482_p4);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( pixConvolved_reg_478 );
    sensitive << ( exitcond1_reg_985_pp0_iter1_reg );
    sensitive << ( pixConvolved_2_reg_1112 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_col_assign_1_0_2_fu_653_p2);
    sensitive << ( ap_phi_mux_pixConvolved_phi_fu_482_p4 );

    SC_METHOD(thread_countWait_2_fu_891_p2);
    sensitive << ( countWait_1_reg_502 );

    SC_METHOD(thread_dataOutSideChannel_d_1_fu_877_p3);
    sensitive << ( or_cond_reg_1004_pp0_iter1_reg );
    sensitive << ( phitmp1_fu_869_p3 );

    SC_METHOD(thread_dataOutSideChannel_l_fu_897_p2);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_state16_io );
    sensitive << ( countWait_1_reg_502 );

    SC_METHOD(thread_exitcond1_fu_526_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_countWait_phi_fu_494_p4 );

    SC_METHOD(thread_exitcond_fu_885_p2);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_block_state16_io );
    sensitive << ( countWait_1_reg_502 );

    SC_METHOD(thread_grp_fu_904_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( grp_fu_904_p10 );

    SC_METHOD(thread_grp_fu_904_p10);
    sensitive << ( reg_517 );

    SC_METHOD(thread_grp_fu_911_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( grp_fu_911_p10 );

    SC_METHOD(thread_grp_fu_911_p10);
    sensitive << ( lineBuff_val_0_load_2_reg_1122 );

    SC_METHOD(thread_grp_fu_911_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( window_val_2_2_fu_749_p0 );
    sensitive << ( window_val_2_2_fu_749_p1 );

    SC_METHOD(thread_grp_fu_919_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( grp_fu_919_p10 );

    SC_METHOD(thread_grp_fu_919_p10);
    sensitive << ( lineBuff_val_1_load_1_reg_1157 );

    SC_METHOD(thread_grp_fu_926_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8 );
    sensitive << ( grp_fu_926_p10 );

    SC_METHOD(thread_grp_fu_926_p10);
    sensitive << ( lineBuff_val_1_load_3_reg_1137 );

    SC_METHOD(thread_grp_fu_933_p1);
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_933_p10 );

    SC_METHOD(thread_grp_fu_933_p10);
    sensitive << ( lineBuff_val_2_load_1_reg_1162 );

    SC_METHOD(thread_icmp3_fu_564_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_fu_526_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_4_fu_554_p4 );

    SC_METHOD(thread_icmp_fu_548_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_fu_526_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_3_fu_538_p4 );

    SC_METHOD(thread_idxCol_1_fu_672_p3);
    sensitive << ( tmp_12_reg_1010 );
    sensitive << ( idxCol_reg_1016 );

    SC_METHOD(thread_idxCol_fu_582_p2);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_460_p4 );

    SC_METHOD(thread_idxRow_1_fu_594_p3);
    sensitive << ( tmp_12_fu_576_p2 );
    sensitive << ( ap_phi_mux_idxRow_phi_fu_471_p4 );
    sensitive << ( idxRow_2_fu_588_p2 );

    SC_METHOD(thread_idxRow_2_fu_588_p2);
    sensitive << ( ap_phi_mux_idxRow_phi_fu_471_p4 );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( inStream_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( exitcond1_reg_985 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_in);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_data_V_0_data_out);
    sensitive << ( inStream_V_data_V_0_payload_A );
    sensitive << ( inStream_V_data_V_0_payload_B );
    sensitive << ( inStream_V_data_V_0_sel );

    SC_METHOD(thread_inStream_V_data_V_0_load_A);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_load_B);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_sel);
    sensitive << ( inStream_V_data_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_data_V_0_state_cmp_full);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_data_V_0_vld_out);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_in);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_dest_V_0_data_out);
    sensitive << ( inStream_V_dest_V_0_payload_A );
    sensitive << ( inStream_V_dest_V_0_payload_B );
    sensitive << ( inStream_V_dest_V_0_sel );

    SC_METHOD(thread_inStream_V_dest_V_0_load_A);
    sensitive << ( inStream_V_dest_V_0_sel_wr );
    sensitive << ( inStream_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_dest_V_0_load_B);
    sensitive << ( inStream_V_dest_V_0_sel_wr );
    sensitive << ( inStream_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_dest_V_0_sel);
    sensitive << ( inStream_V_dest_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_dest_V_0_state_cmp_full);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_out);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_ack_in);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_id_V_0_data_out);
    sensitive << ( inStream_V_id_V_0_payload_A );
    sensitive << ( inStream_V_id_V_0_payload_B );
    sensitive << ( inStream_V_id_V_0_sel );

    SC_METHOD(thread_inStream_V_id_V_0_load_A);
    sensitive << ( inStream_V_id_V_0_sel_wr );
    sensitive << ( inStream_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_id_V_0_load_B);
    sensitive << ( inStream_V_id_V_0_sel_wr );
    sensitive << ( inStream_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_id_V_0_sel);
    sensitive << ( inStream_V_id_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_id_V_0_state_cmp_full);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_id_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_id_V_0_vld_out);
    sensitive << ( inStream_V_id_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_ack_in);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_keep_V_0_data_out);
    sensitive << ( inStream_V_keep_V_0_payload_A );
    sensitive << ( inStream_V_keep_V_0_payload_B );
    sensitive << ( inStream_V_keep_V_0_sel );

    SC_METHOD(thread_inStream_V_keep_V_0_load_A);
    sensitive << ( inStream_V_keep_V_0_sel_wr );
    sensitive << ( inStream_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_keep_V_0_load_B);
    sensitive << ( inStream_V_keep_V_0_sel_wr );
    sensitive << ( inStream_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_keep_V_0_sel);
    sensitive << ( inStream_V_keep_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_keep_V_0_state_cmp_full);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_keep_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_keep_V_0_vld_out);
    sensitive << ( inStream_V_keep_V_0_state );

    SC_METHOD(thread_inStream_V_last_V_0_ack_in);
    sensitive << ( inStream_V_last_V_0_state );

    SC_METHOD(thread_inStream_V_last_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_last_V_0_data_out);
    sensitive << ( inStream_V_last_V_0_payload_A );
    sensitive << ( inStream_V_last_V_0_payload_B );
    sensitive << ( inStream_V_last_V_0_sel );

    SC_METHOD(thread_inStream_V_last_V_0_load_A);
    sensitive << ( inStream_V_last_V_0_sel_wr );
    sensitive << ( inStream_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_last_V_0_load_B);
    sensitive << ( inStream_V_last_V_0_sel_wr );
    sensitive << ( inStream_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_last_V_0_sel);
    sensitive << ( inStream_V_last_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_last_V_0_state_cmp_full);
    sensitive << ( inStream_V_last_V_0_state );

    SC_METHOD(thread_inStream_V_last_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_last_V_0_vld_out);
    sensitive << ( inStream_V_last_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_ack_in);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_strb_V_0_data_out);
    sensitive << ( inStream_V_strb_V_0_payload_A );
    sensitive << ( inStream_V_strb_V_0_payload_B );
    sensitive << ( inStream_V_strb_V_0_sel );

    SC_METHOD(thread_inStream_V_strb_V_0_load_A);
    sensitive << ( inStream_V_strb_V_0_sel_wr );
    sensitive << ( inStream_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_strb_V_0_load_B);
    sensitive << ( inStream_V_strb_V_0_sel_wr );
    sensitive << ( inStream_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_strb_V_0_sel);
    sensitive << ( inStream_V_strb_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_strb_V_0_state_cmp_full);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_strb_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_strb_V_0_vld_out);
    sensitive << ( inStream_V_strb_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_ack_in);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_inStream_V_user_V_0_data_out);
    sensitive << ( inStream_V_user_V_0_payload_A );
    sensitive << ( inStream_V_user_V_0_payload_B );
    sensitive << ( inStream_V_user_V_0_sel );

    SC_METHOD(thread_inStream_V_user_V_0_load_A);
    sensitive << ( inStream_V_user_V_0_sel_wr );
    sensitive << ( inStream_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_user_V_0_load_B);
    sensitive << ( inStream_V_user_V_0_sel_wr );
    sensitive << ( inStream_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_user_V_0_sel);
    sensitive << ( inStream_V_user_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_user_V_0_state_cmp_full);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_inStream_V_user_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_user_V_0_vld_out);
    sensitive << ( inStream_V_user_V_0_state );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage8 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_block_pp0_stage8_11001 );

    SC_METHOD(thread_lineBuff_val_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_s_reg_989 );
    sensitive << ( tmp_6_fu_637_p1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_lineBuff_val_0_address1);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_20_0_1_reg_1076 );
    sensitive << ( tmp_20_0_2_fu_659_p1 );

    SC_METHOD(thread_lineBuff_val_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_0_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_0_we0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_fu_532_p1 );
    sensitive << ( lineBuff_val_1_addr_reg_994 );
    sensitive << ( tmp_20_0_1_fu_648_p1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_lineBuff_val_1_address1);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_6_reg_1065 );
    sensitive << ( tmp_20_0_2_fu_659_p1 );

    SC_METHOD(thread_lineBuff_val_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_1_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_1_we0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_fu_532_p1 );
    sensitive << ( lineBuff_val_2_addr_reg_999 );
    sensitive << ( tmp_6_reg_1065 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_lineBuff_val_2_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( tmp_20_0_1_reg_1076 );
    sensitive << ( tmp_20_0_2_reg_1082 );
    sensitive << ( ap_block_pp0_stage4 );

    SC_METHOD(thread_lineBuff_val_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_lineBuff_val_2_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );

    SC_METHOD(thread_lineBuff_val_2_we0);
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_reg_985 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_or_cond_fu_570_p2);
    sensitive << ( icmp_fu_548_p2 );
    sensitive << ( icmp3_fu_564_p2 );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( outStream_V_data_V_1_data_out );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( outStream_V_dest_V_1_data_out );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( outStream_V_id_V_1_data_out );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( outStream_V_keep_V_1_data_out );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( outStream_V_last_V_1_data_out );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( outStream_V_strb_V_1_data_out );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( outStream_V_user_V_1_data_out );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_in);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_data_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( dataOutSideChannel_d_1_fu_877_p3 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_data_V_1_data_out);
    sensitive << ( outStream_V_data_V_1_payload_A );
    sensitive << ( outStream_V_data_V_1_payload_B );
    sensitive << ( outStream_V_data_V_1_sel );

    SC_METHOD(thread_outStream_V_data_V_1_load_A);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_load_B);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_sel);
    sensitive << ( outStream_V_data_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_data_V_1_state_cmp_full);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_data_V_1_vld_out);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_in);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_dest_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( dataOutSideChannel_d_reg_443 );
    sensitive << ( tmp_dest_V_reg_1059 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_dest_V_1_data_out);
    sensitive << ( outStream_V_dest_V_1_payload_A );
    sensitive << ( outStream_V_dest_V_1_payload_B );
    sensitive << ( outStream_V_dest_V_1_sel );

    SC_METHOD(thread_outStream_V_dest_V_1_load_A);
    sensitive << ( outStream_V_dest_V_1_sel_wr );
    sensitive << ( outStream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_dest_V_1_load_B);
    sensitive << ( outStream_V_dest_V_1_sel_wr );
    sensitive << ( outStream_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_dest_V_1_sel);
    sensitive << ( outStream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_dest_V_1_state_cmp_full);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_out);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_in);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_id_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( dataOutSideChannel_i_reg_391 );
    sensitive << ( tmp_id_V_reg_1053 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_id_V_1_data_out);
    sensitive << ( outStream_V_id_V_1_payload_A );
    sensitive << ( outStream_V_id_V_1_payload_B );
    sensitive << ( outStream_V_id_V_1_sel );

    SC_METHOD(thread_outStream_V_id_V_1_load_A);
    sensitive << ( outStream_V_id_V_1_sel_wr );
    sensitive << ( outStream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_id_V_1_load_B);
    sensitive << ( outStream_V_id_V_1_sel_wr );
    sensitive << ( outStream_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_id_V_1_sel);
    sensitive << ( outStream_V_id_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_id_V_1_state_cmp_full);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_id_V_1_vld_out);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_in);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_keep_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( dataOutSideChannel_k_reg_430 );
    sensitive << ( tmp_keep_V_reg_1030 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_keep_V_1_data_out);
    sensitive << ( outStream_V_keep_V_1_payload_A );
    sensitive << ( outStream_V_keep_V_1_payload_B );
    sensitive << ( outStream_V_keep_V_1_sel );

    SC_METHOD(thread_outStream_V_keep_V_1_load_A);
    sensitive << ( outStream_V_keep_V_1_sel_wr );
    sensitive << ( outStream_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_keep_V_1_load_B);
    sensitive << ( outStream_V_keep_V_1_sel_wr );
    sensitive << ( outStream_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_keep_V_1_sel);
    sensitive << ( outStream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_keep_V_1_state_cmp_full);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_out);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_in);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_last_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( tmp_last_V_reg_1048 );
    sensitive << ( dataOutSideChannel_l_fu_897_p2 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_last_V_1_data_out);
    sensitive << ( outStream_V_last_V_1_payload_A );
    sensitive << ( outStream_V_last_V_1_payload_B );
    sensitive << ( outStream_V_last_V_1_sel );

    SC_METHOD(thread_outStream_V_last_V_1_load_A);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_load_B);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_sel);
    sensitive << ( outStream_V_last_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_last_V_1_state_cmp_full);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_last_V_1_vld_out);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_in);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_strb_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( dataOutSideChannel_s_reg_417 );
    sensitive << ( tmp_strb_V_reg_1036 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_strb_V_1_data_out);
    sensitive << ( outStream_V_strb_V_1_payload_A );
    sensitive << ( outStream_V_strb_V_1_payload_B );
    sensitive << ( outStream_V_strb_V_1_sel );

    SC_METHOD(thread_outStream_V_strb_V_1_load_A);
    sensitive << ( outStream_V_strb_V_1_sel_wr );
    sensitive << ( outStream_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_strb_V_1_load_B);
    sensitive << ( outStream_V_strb_V_1_sel_wr );
    sensitive << ( outStream_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_strb_V_1_sel);
    sensitive << ( outStream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_strb_V_1_state_cmp_full);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_out);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_in);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_user_V_1_data_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( dataOutSideChannel_u_reg_404 );
    sensitive << ( tmp_user_V_reg_1042 );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_outStream_V_user_V_1_data_out);
    sensitive << ( outStream_V_user_V_1_payload_A );
    sensitive << ( outStream_V_user_V_1_payload_B );
    sensitive << ( outStream_V_user_V_1_sel );

    SC_METHOD(thread_outStream_V_user_V_1_load_A);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_load_B);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_sel);
    sensitive << ( outStream_V_user_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_user_V_1_state_cmp_full);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_vld_in);
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_reg_1026_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_outStream_V_user_V_1_vld_out);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_p_neg_fu_808_p2);
    sensitive << ( tmp_10_tr_fu_796_p1 );

    SC_METHOD(thread_phitmp1_fu_869_p3);
    sensitive << ( tmp_11_fu_861_p3 );
    sensitive << ( tmp_10_fu_857_p1 );

    SC_METHOD(thread_phitmp_fu_769_p2);
    sensitive << ( countWait_reg_490 );

    SC_METHOD(thread_pixConvolved_1_fu_665_p3);
    sensitive << ( or_cond_reg_1004 );
    sensitive << ( ap_phi_mux_pixConvolved_phi_fu_482_p4 );
    sensitive << ( pixConvolved_3_fu_642_p2 );

    SC_METHOD(thread_pixConvolved_2_fu_678_p3);
    sensitive << ( tmp_12_reg_1010 );
    sensitive << ( pixConvolved_1_fu_665_p3 );

    SC_METHOD(thread_pixConvolved_3_fu_642_p2);
    sensitive << ( ap_phi_mux_pixConvolved_phi_fu_482_p4 );

    SC_METHOD(thread_tmp4_fu_786_p2);
    sensitive << ( tmp1_reg_1177 );
    sensitive << ( tmp3_reg_1187 );

    SC_METHOD(thread_tmp7_fu_782_p2);
    sensitive << ( tmp9_reg_1192 );
    sensitive << ( tmp8_reg_1202 );

    SC_METHOD(thread_tmp_10_cast_fu_846_p1);
    sensitive << ( tmp_9_fu_837_p1 );

    SC_METHOD(thread_tmp_10_fu_857_p1);
    sensitive << ( valOutput_fu_850_p3 );

    SC_METHOD(thread_tmp_10_tr_fu_796_p1);
    sensitive << ( accumulator_2_2_2_i_fu_790_p2 );

    SC_METHOD(thread_tmp_11_fu_861_p3);
    sensitive << ( valOutput_fu_850_p3 );

    SC_METHOD(thread_tmp_12_fu_576_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_fu_526_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_col_assign_phi_fu_460_p4 );

    SC_METHOD(thread_tmp_13_fu_602_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_fu_526_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_countWait_phi_fu_494_p4 );

    SC_METHOD(thread_tmp_1_fu_840_p2);
    sensitive << ( tmp_6_cast_fu_834_p1 );

    SC_METHOD(thread_tmp_20_0_1_fu_648_p1);
    sensitive << ( pixConvolved_3_fu_642_p2 );

    SC_METHOD(thread_tmp_20_0_2_fu_659_p1);
    sensitive << ( col_assign_1_0_2_fu_653_p2 );

    SC_METHOD(thread_tmp_3_fu_538_p4);
    sensitive << ( ap_phi_mux_idxRow_phi_fu_471_p4 );

    SC_METHOD(thread_tmp_4_fu_554_p4);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_460_p4 );

    SC_METHOD(thread_tmp_6_cast_fu_834_p1);
    sensitive << ( tmp_7_reg_1212 );

    SC_METHOD(thread_tmp_6_fu_637_p1);
    sensitive << ( ap_phi_mux_pixConvolved_phi_fu_482_p4 );

    SC_METHOD(thread_tmp_9_fu_837_p1);
    sensitive << ( tmp_8_reg_1217 );

    SC_METHOD(thread_tmp_s_fu_532_p1);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_460_p4 );

    SC_METHOD(thread_valOutput_fu_850_p3);
    sensitive << ( tmp_5_reg_1207 );
    sensitive << ( tmp_1_fu_840_p2 );
    sensitive << ( tmp_10_cast_fu_846_p1 );

    SC_METHOD(thread_window_val_0_0_fu_707_p0);
    sensitive << ( kernel_q0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );

    SC_METHOD(thread_window_val_0_0_fu_707_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( window_val_0_0_fu_707_p10 );

    SC_METHOD(thread_window_val_0_0_fu_707_p10);
    sensitive << ( reg_517 );

    SC_METHOD(thread_window_val_0_0_fu_707_p2);
    sensitive << ( window_val_0_0_fu_707_p0 );
    sensitive << ( window_val_0_0_fu_707_p1 );

    SC_METHOD(thread_window_val_1_1_fu_693_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( reg_513 );

    SC_METHOD(thread_window_val_1_1_fu_693_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( window_val_1_1_fu_693_p10 );

    SC_METHOD(thread_window_val_1_1_fu_693_p10);
    sensitive << ( lineBuff_val_1_q0 );

    SC_METHOD(thread_window_val_1_1_fu_693_p2);
    sensitive << ( window_val_1_1_fu_693_p0 );
    sensitive << ( window_val_1_1_fu_693_p1 );

    SC_METHOD(thread_window_val_2_1_fu_728_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( kernel_load_7_reg_1102 );
    sensitive << ( ap_block_pp0_stage5 );

    SC_METHOD(thread_window_val_2_1_fu_728_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( window_val_2_1_fu_728_p10 );

    SC_METHOD(thread_window_val_2_1_fu_728_p10);
    sensitive << ( reg_522 );

    SC_METHOD(thread_window_val_2_1_fu_728_p2);
    sensitive << ( window_val_2_1_fu_728_p0 );
    sensitive << ( window_val_2_1_fu_728_p1 );

    SC_METHOD(thread_window_val_2_2_fu_749_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( reg_513 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_window_val_2_2_fu_749_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( window_val_2_2_fu_749_p10 );

    SC_METHOD(thread_window_val_2_2_fu_749_p10);
    sensitive << ( reg_522 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_keep_V_1_ack_in );
    sensitive << ( outStream_V_strb_V_1_ack_in );
    sensitive << ( outStream_V_user_V_1_ack_in );
    sensitive << ( outStream_V_last_V_1_ack_in );
    sensitive << ( outStream_V_id_V_1_ack_in );
    sensitive << ( outStream_V_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_885_p2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( exitcond1_fu_526_p2 );
    sensitive << ( ap_block_state16_io );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage8_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );
    sensitive << ( ap_block_pp0_stage7_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000001";
    inStream_V_data_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_data_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_data_V_0_state = "00";
    inStream_V_keep_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_keep_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_keep_V_0_state = "00";
    inStream_V_strb_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_strb_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_strb_V_0_state = "00";
    inStream_V_user_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_user_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_user_V_0_state = "00";
    inStream_V_last_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_last_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_last_V_0_state = "00";
    inStream_V_id_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_id_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_id_V_0_state = "00";
    inStream_V_dest_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_dest_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_dest_V_0_state = "00";
    outStream_V_data_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_data_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_data_V_1_state = "00";
    outStream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_keep_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_keep_V_1_state = "00";
    outStream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_strb_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_strb_V_1_state = "00";
    outStream_V_user_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_user_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_user_V_1_state = "00";
    outStream_V_last_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_last_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_last_V_1_state = "00";
    outStream_V_id_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_id_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_id_V_1_state = "00";
    outStream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_dest_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "doImgproc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWVALID, "(port)s_axi_KERNEL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWREADY, "(port)s_axi_KERNEL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_AWADDR, "(port)s_axi_KERNEL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WVALID, "(port)s_axi_KERNEL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WREADY, "(port)s_axi_KERNEL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WDATA, "(port)s_axi_KERNEL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_WSTRB, "(port)s_axi_KERNEL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARVALID, "(port)s_axi_KERNEL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARREADY, "(port)s_axi_KERNEL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_ARADDR, "(port)s_axi_KERNEL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RVALID, "(port)s_axi_KERNEL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RREADY, "(port)s_axi_KERNEL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RDATA, "(port)s_axi_KERNEL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_RRESP, "(port)s_axi_KERNEL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BVALID, "(port)s_axi_KERNEL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BREADY, "(port)s_axi_KERNEL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_KERNEL_BUS_BRESP, "(port)s_axi_KERNEL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inStream_V_data_V_0_data_out, "inStream_V_data_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_in, "inStream_V_data_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_out, "inStream_V_data_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_in, "inStream_V_data_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_out, "inStream_V_data_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_A, "inStream_V_data_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_B, "inStream_V_data_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_rd, "inStream_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_wr, "inStream_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel, "inStream_V_data_V_0_sel");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_A, "inStream_V_data_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_B, "inStream_V_data_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_state, "inStream_V_data_V_0_state");
    sc_trace(mVcdFile, inStream_V_data_V_0_state_cmp_full, "inStream_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_keep_V_0_data_out, "inStream_V_keep_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_vld_in, "inStream_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_keep_V_0_vld_out, "inStream_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_ack_in, "inStream_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_keep_V_0_ack_out, "inStream_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_keep_V_0_payload_A, "inStream_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_keep_V_0_payload_B, "inStream_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel_rd, "inStream_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel_wr, "inStream_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_keep_V_0_sel, "inStream_V_keep_V_0_sel");
    sc_trace(mVcdFile, inStream_V_keep_V_0_load_A, "inStream_V_keep_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_keep_V_0_load_B, "inStream_V_keep_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_keep_V_0_state, "inStream_V_keep_V_0_state");
    sc_trace(mVcdFile, inStream_V_keep_V_0_state_cmp_full, "inStream_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_strb_V_0_data_out, "inStream_V_strb_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_vld_in, "inStream_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_strb_V_0_vld_out, "inStream_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_ack_in, "inStream_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_strb_V_0_ack_out, "inStream_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_strb_V_0_payload_A, "inStream_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_strb_V_0_payload_B, "inStream_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel_rd, "inStream_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel_wr, "inStream_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_strb_V_0_sel, "inStream_V_strb_V_0_sel");
    sc_trace(mVcdFile, inStream_V_strb_V_0_load_A, "inStream_V_strb_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_strb_V_0_load_B, "inStream_V_strb_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_strb_V_0_state, "inStream_V_strb_V_0_state");
    sc_trace(mVcdFile, inStream_V_strb_V_0_state_cmp_full, "inStream_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_user_V_0_data_out, "inStream_V_user_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_vld_in, "inStream_V_user_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_user_V_0_vld_out, "inStream_V_user_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_ack_in, "inStream_V_user_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_user_V_0_ack_out, "inStream_V_user_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_user_V_0_payload_A, "inStream_V_user_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_user_V_0_payload_B, "inStream_V_user_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel_rd, "inStream_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel_wr, "inStream_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_user_V_0_sel, "inStream_V_user_V_0_sel");
    sc_trace(mVcdFile, inStream_V_user_V_0_load_A, "inStream_V_user_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_user_V_0_load_B, "inStream_V_user_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_user_V_0_state, "inStream_V_user_V_0_state");
    sc_trace(mVcdFile, inStream_V_user_V_0_state_cmp_full, "inStream_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_last_V_0_data_out, "inStream_V_last_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_last_V_0_vld_in, "inStream_V_last_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_last_V_0_vld_out, "inStream_V_last_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_last_V_0_ack_in, "inStream_V_last_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_last_V_0_ack_out, "inStream_V_last_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_last_V_0_payload_A, "inStream_V_last_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_last_V_0_payload_B, "inStream_V_last_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_last_V_0_sel_rd, "inStream_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_last_V_0_sel_wr, "inStream_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_last_V_0_sel, "inStream_V_last_V_0_sel");
    sc_trace(mVcdFile, inStream_V_last_V_0_load_A, "inStream_V_last_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_last_V_0_load_B, "inStream_V_last_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_last_V_0_state, "inStream_V_last_V_0_state");
    sc_trace(mVcdFile, inStream_V_last_V_0_state_cmp_full, "inStream_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_id_V_0_data_out, "inStream_V_id_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_vld_in, "inStream_V_id_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_id_V_0_vld_out, "inStream_V_id_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_ack_in, "inStream_V_id_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_id_V_0_ack_out, "inStream_V_id_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_id_V_0_payload_A, "inStream_V_id_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_id_V_0_payload_B, "inStream_V_id_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel_rd, "inStream_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel_wr, "inStream_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_id_V_0_sel, "inStream_V_id_V_0_sel");
    sc_trace(mVcdFile, inStream_V_id_V_0_load_A, "inStream_V_id_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_id_V_0_load_B, "inStream_V_id_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_id_V_0_state, "inStream_V_id_V_0_state");
    sc_trace(mVcdFile, inStream_V_id_V_0_state_cmp_full, "inStream_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_dest_V_0_data_out, "inStream_V_dest_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_in, "inStream_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_out, "inStream_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_in, "inStream_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_out, "inStream_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_payload_A, "inStream_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_dest_V_0_payload_B, "inStream_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel_rd, "inStream_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel_wr, "inStream_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_dest_V_0_sel, "inStream_V_dest_V_0_sel");
    sc_trace(mVcdFile, inStream_V_dest_V_0_load_A, "inStream_V_dest_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_dest_V_0_load_B, "inStream_V_dest_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state, "inStream_V_dest_V_0_state");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state_cmp_full, "inStream_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_in, "outStream_V_data_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_out, "outStream_V_data_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_in, "outStream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_out, "outStream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_in, "outStream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_out, "outStream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_A, "outStream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_B, "outStream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_rd, "outStream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_wr, "outStream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel, "outStream_V_data_V_1_sel");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_A, "outStream_V_data_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_B, "outStream_V_data_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_state, "outStream_V_data_V_1_state");
    sc_trace(mVcdFile, outStream_V_data_V_1_state_cmp_full, "outStream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_in, "outStream_V_keep_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_out, "outStream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_in, "outStream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_out, "outStream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_in, "outStream_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_out, "outStream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_payload_A, "outStream_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_keep_V_1_payload_B, "outStream_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_rd, "outStream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_wr, "outStream_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel, "outStream_V_keep_V_1_sel");
    sc_trace(mVcdFile, outStream_V_keep_V_1_load_A, "outStream_V_keep_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_keep_V_1_load_B, "outStream_V_keep_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state, "outStream_V_keep_V_1_state");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state_cmp_full, "outStream_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_in, "outStream_V_strb_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_out, "outStream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_in, "outStream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_out, "outStream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_in, "outStream_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_out, "outStream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_payload_A, "outStream_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_strb_V_1_payload_B, "outStream_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_rd, "outStream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_wr, "outStream_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel, "outStream_V_strb_V_1_sel");
    sc_trace(mVcdFile, outStream_V_strb_V_1_load_A, "outStream_V_strb_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_strb_V_1_load_B, "outStream_V_strb_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state, "outStream_V_strb_V_1_state");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state_cmp_full, "outStream_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_in, "outStream_V_user_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_out, "outStream_V_user_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_in, "outStream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_out, "outStream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_in, "outStream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_out, "outStream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_A, "outStream_V_user_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_B, "outStream_V_user_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_rd, "outStream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_wr, "outStream_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel, "outStream_V_user_V_1_sel");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_A, "outStream_V_user_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_B, "outStream_V_user_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_state, "outStream_V_user_V_1_state");
    sc_trace(mVcdFile, outStream_V_user_V_1_state_cmp_full, "outStream_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_in, "outStream_V_last_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_out, "outStream_V_last_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_in, "outStream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_out, "outStream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_in, "outStream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_out, "outStream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_A, "outStream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_B, "outStream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_rd, "outStream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_wr, "outStream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel, "outStream_V_last_V_1_sel");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_A, "outStream_V_last_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_B, "outStream_V_last_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_state, "outStream_V_last_V_1_state");
    sc_trace(mVcdFile, outStream_V_last_V_1_state_cmp_full, "outStream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_in, "outStream_V_id_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_out, "outStream_V_id_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_in, "outStream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_out, "outStream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_in, "outStream_V_id_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_out, "outStream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_payload_A, "outStream_V_id_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_id_V_1_payload_B, "outStream_V_id_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_rd, "outStream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_wr, "outStream_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel, "outStream_V_id_V_1_sel");
    sc_trace(mVcdFile, outStream_V_id_V_1_load_A, "outStream_V_id_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_id_V_1_load_B, "outStream_V_id_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_id_V_1_state, "outStream_V_id_V_1_state");
    sc_trace(mVcdFile, outStream_V_id_V_1_state_cmp_full, "outStream_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_in, "outStream_V_dest_V_1_data_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_out, "outStream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_in, "outStream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_out, "outStream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_in, "outStream_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_out, "outStream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_payload_A, "outStream_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_dest_V_1_payload_B, "outStream_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_rd, "outStream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_wr, "outStream_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel, "outStream_V_dest_V_1_sel");
    sc_trace(mVcdFile, outStream_V_dest_V_1_load_A, "outStream_V_dest_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_dest_V_1_load_B, "outStream_V_dest_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state, "outStream_V_dest_V_1_state");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state_cmp_full, "outStream_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, kernel_address0, "kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "kernel_q0");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, exitcond1_reg_985, "exitcond1_reg_985");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_13_reg_1026, "tmp_13_reg_1026");
    sc_trace(mVcdFile, tmp_13_reg_1026_pp0_iter1_reg, "tmp_13_reg_1026_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, exitcond_fu_885_p2, "exitcond_fu_885_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, dataOutSideChannel_i_reg_391, "dataOutSideChannel_i_reg_391");
    sc_trace(mVcdFile, dataOutSideChannel_u_reg_404, "dataOutSideChannel_u_reg_404");
    sc_trace(mVcdFile, dataOutSideChannel_s_reg_417, "dataOutSideChannel_s_reg_417");
    sc_trace(mVcdFile, dataOutSideChannel_k_reg_430, "dataOutSideChannel_k_reg_430");
    sc_trace(mVcdFile, dataOutSideChannel_d_reg_443, "dataOutSideChannel_d_reg_443");
    sc_trace(mVcdFile, col_assign_reg_456, "col_assign_reg_456");
    sc_trace(mVcdFile, idxRow_reg_467, "idxRow_reg_467");
    sc_trace(mVcdFile, pixConvolved_reg_478, "pixConvolved_reg_478");
    sc_trace(mVcdFile, countWait_reg_490, "countWait_reg_490");
    sc_trace(mVcdFile, reg_513, "reg_513");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage1_iter1, "ap_block_state12_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage3_iter0, "ap_block_state5_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage3_iter1, "ap_block_state14_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, or_cond_reg_1004, "or_cond_reg_1004");
    sc_trace(mVcdFile, lineBuff_val_0_q0, "lineBuff_val_0_q0");
    sc_trace(mVcdFile, reg_517, "reg_517");
    sc_trace(mVcdFile, lineBuff_val_0_q1, "lineBuff_val_0_q1");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage4_iter0, "ap_block_state6_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, lineBuff_val_2_q1, "lineBuff_val_2_q1");
    sc_trace(mVcdFile, reg_522, "reg_522");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage5_iter0, "ap_block_state7_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage5_11001, "ap_block_pp0_stage5_11001");
    sc_trace(mVcdFile, exitcond1_fu_526_p2, "exitcond1_fu_526_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond1_reg_985_pp0_iter1_reg, "exitcond1_reg_985_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_s_fu_532_p1, "tmp_s_fu_532_p1");
    sc_trace(mVcdFile, tmp_s_reg_989, "tmp_s_reg_989");
    sc_trace(mVcdFile, lineBuff_val_1_addr_reg_994, "lineBuff_val_1_addr_reg_994");
    sc_trace(mVcdFile, lineBuff_val_2_addr_reg_999, "lineBuff_val_2_addr_reg_999");
    sc_trace(mVcdFile, or_cond_fu_570_p2, "or_cond_fu_570_p2");
    sc_trace(mVcdFile, or_cond_reg_1004_pp0_iter1_reg, "or_cond_reg_1004_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_12_fu_576_p2, "tmp_12_fu_576_p2");
    sc_trace(mVcdFile, tmp_12_reg_1010, "tmp_12_reg_1010");
    sc_trace(mVcdFile, idxCol_fu_582_p2, "idxCol_fu_582_p2");
    sc_trace(mVcdFile, idxCol_reg_1016, "idxCol_reg_1016");
    sc_trace(mVcdFile, idxRow_1_fu_594_p3, "idxRow_1_fu_594_p3");
    sc_trace(mVcdFile, idxRow_1_reg_1021, "idxRow_1_reg_1021");
    sc_trace(mVcdFile, tmp_13_fu_602_p2, "tmp_13_fu_602_p2");
    sc_trace(mVcdFile, tmp_keep_V_reg_1030, "tmp_keep_V_reg_1030");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage2_iter0, "ap_block_state4_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage2_iter1, "ap_block_state13_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, tmp_keep_V_reg_1030_pp0_iter1_reg, "tmp_keep_V_reg_1030_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_strb_V_reg_1036, "tmp_strb_V_reg_1036");
    sc_trace(mVcdFile, tmp_strb_V_reg_1036_pp0_iter1_reg, "tmp_strb_V_reg_1036_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_user_V_reg_1042, "tmp_user_V_reg_1042");
    sc_trace(mVcdFile, tmp_user_V_reg_1042_pp0_iter1_reg, "tmp_user_V_reg_1042_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_last_V_reg_1048, "tmp_last_V_reg_1048");
    sc_trace(mVcdFile, tmp_id_V_reg_1053, "tmp_id_V_reg_1053");
    sc_trace(mVcdFile, tmp_id_V_reg_1053_pp0_iter1_reg, "tmp_id_V_reg_1053_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_dest_V_reg_1059, "tmp_dest_V_reg_1059");
    sc_trace(mVcdFile, tmp_dest_V_reg_1059_pp0_iter1_reg, "tmp_dest_V_reg_1059_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_6_fu_637_p1, "tmp_6_fu_637_p1");
    sc_trace(mVcdFile, tmp_6_reg_1065, "tmp_6_reg_1065");
    sc_trace(mVcdFile, tmp_20_0_1_fu_648_p1, "tmp_20_0_1_fu_648_p1");
    sc_trace(mVcdFile, tmp_20_0_1_reg_1076, "tmp_20_0_1_reg_1076");
    sc_trace(mVcdFile, tmp_20_0_2_fu_659_p1, "tmp_20_0_2_fu_659_p1");
    sc_trace(mVcdFile, tmp_20_0_2_reg_1082, "tmp_20_0_2_reg_1082");
    sc_trace(mVcdFile, kernel_load_7_reg_1102, "kernel_load_7_reg_1102");
    sc_trace(mVcdFile, idxCol_1_fu_672_p3, "idxCol_1_fu_672_p3");
    sc_trace(mVcdFile, idxCol_1_reg_1107, "idxCol_1_reg_1107");
    sc_trace(mVcdFile, pixConvolved_2_fu_678_p3, "pixConvolved_2_fu_678_p3");
    sc_trace(mVcdFile, pixConvolved_2_reg_1112, "pixConvolved_2_reg_1112");
    sc_trace(mVcdFile, lineBuff_val_0_load_2_reg_1122, "lineBuff_val_0_load_2_reg_1122");
    sc_trace(mVcdFile, window_val_1_1_fu_693_p2, "window_val_1_1_fu_693_p2");
    sc_trace(mVcdFile, window_val_1_1_reg_1132, "window_val_1_1_reg_1132");
    sc_trace(mVcdFile, lineBuff_val_1_q1, "lineBuff_val_1_q1");
    sc_trace(mVcdFile, lineBuff_val_1_load_3_reg_1137, "lineBuff_val_1_load_3_reg_1137");
    sc_trace(mVcdFile, window_val_0_0_fu_707_p2, "window_val_0_0_fu_707_p2");
    sc_trace(mVcdFile, window_val_0_0_reg_1152, "window_val_0_0_reg_1152");
    sc_trace(mVcdFile, lineBuff_val_1_load_1_reg_1157, "lineBuff_val_1_load_1_reg_1157");
    sc_trace(mVcdFile, lineBuff_val_2_q0, "lineBuff_val_2_q0");
    sc_trace(mVcdFile, lineBuff_val_2_load_1_reg_1162, "lineBuff_val_2_load_1_reg_1162");
    sc_trace(mVcdFile, window_val_2_1_fu_728_p2, "window_val_2_1_fu_728_p2");
    sc_trace(mVcdFile, window_val_2_1_reg_1172, "window_val_2_1_reg_1172");
    sc_trace(mVcdFile, grp_fu_904_p3, "grp_fu_904_p3");
    sc_trace(mVcdFile, tmp1_reg_1177, "tmp1_reg_1177");
    sc_trace(mVcdFile, grp_fu_911_p3, "grp_fu_911_p3");
    sc_trace(mVcdFile, tmp2_reg_1182, "tmp2_reg_1182");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage6_iter0, "ap_block_state8_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage6_11001, "ap_block_pp0_stage6_11001");
    sc_trace(mVcdFile, grp_fu_919_p3, "grp_fu_919_p3");
    sc_trace(mVcdFile, tmp3_reg_1187, "tmp3_reg_1187");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage7_iter0, "ap_block_state9_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage7_11001, "ap_block_pp0_stage7_11001");
    sc_trace(mVcdFile, grp_fu_926_p3, "grp_fu_926_p3");
    sc_trace(mVcdFile, tmp9_reg_1192, "tmp9_reg_1192");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage8, "ap_CS_fsm_pp0_stage8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage8_iter0, "ap_block_state10_pp0_stage8_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage8_11001, "ap_block_pp0_stage8_11001");
    sc_trace(mVcdFile, phitmp_fu_769_p2, "phitmp_fu_769_p2");
    sc_trace(mVcdFile, phitmp_reg_1197, "phitmp_reg_1197");
    sc_trace(mVcdFile, grp_fu_933_p3, "grp_fu_933_p3");
    sc_trace(mVcdFile, tmp8_reg_1202, "tmp8_reg_1202");
    sc_trace(mVcdFile, tmp_5_reg_1207, "tmp_5_reg_1207");
    sc_trace(mVcdFile, tmp_7_reg_1212, "tmp_7_reg_1212");
    sc_trace(mVcdFile, tmp_8_reg_1217, "tmp_8_reg_1217");
    sc_trace(mVcdFile, dataOutSideChannel_d_1_fu_877_p3, "dataOutSideChannel_d_1_fu_877_p3");
    sc_trace(mVcdFile, countWait_2_fu_891_p2, "countWait_2_fu_891_p2");
    sc_trace(mVcdFile, countWait_2_reg_1230, "countWait_2_reg_1230");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, dataOutSideChannel_l_fu_897_p2, "dataOutSideChannel_l_fu_897_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage8_subdone, "ap_block_pp0_stage8_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, lineBuff_val_0_address0, "lineBuff_val_0_address0");
    sc_trace(mVcdFile, lineBuff_val_0_ce0, "lineBuff_val_0_ce0");
    sc_trace(mVcdFile, lineBuff_val_0_we0, "lineBuff_val_0_we0");
    sc_trace(mVcdFile, lineBuff_val_0_address1, "lineBuff_val_0_address1");
    sc_trace(mVcdFile, lineBuff_val_0_ce1, "lineBuff_val_0_ce1");
    sc_trace(mVcdFile, lineBuff_val_1_address0, "lineBuff_val_1_address0");
    sc_trace(mVcdFile, lineBuff_val_1_ce0, "lineBuff_val_1_ce0");
    sc_trace(mVcdFile, lineBuff_val_1_we0, "lineBuff_val_1_we0");
    sc_trace(mVcdFile, lineBuff_val_1_q0, "lineBuff_val_1_q0");
    sc_trace(mVcdFile, lineBuff_val_1_address1, "lineBuff_val_1_address1");
    sc_trace(mVcdFile, lineBuff_val_1_ce1, "lineBuff_val_1_ce1");
    sc_trace(mVcdFile, lineBuff_val_2_address0, "lineBuff_val_2_address0");
    sc_trace(mVcdFile, lineBuff_val_2_ce0, "lineBuff_val_2_ce0");
    sc_trace(mVcdFile, lineBuff_val_2_we0, "lineBuff_val_2_we0");
    sc_trace(mVcdFile, lineBuff_val_2_address1, "lineBuff_val_2_address1");
    sc_trace(mVcdFile, lineBuff_val_2_ce1, "lineBuff_val_2_ce1");
    sc_trace(mVcdFile, ap_phi_mux_col_assign_phi_fu_460_p4, "ap_phi_mux_col_assign_phi_fu_460_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_idxRow_phi_fu_471_p4, "ap_phi_mux_idxRow_phi_fu_471_p4");
    sc_trace(mVcdFile, ap_phi_mux_pixConvolved_phi_fu_482_p4, "ap_phi_mux_pixConvolved_phi_fu_482_p4");
    sc_trace(mVcdFile, ap_phi_mux_countWait_phi_fu_494_p4, "ap_phi_mux_countWait_phi_fu_494_p4");
    sc_trace(mVcdFile, countWait_1_reg_502, "countWait_1_reg_502");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, ap_block_pp0_stage2_01001, "ap_block_pp0_stage2_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage3_01001, "ap_block_pp0_stage3_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage5, "ap_block_pp0_stage5");
    sc_trace(mVcdFile, ap_block_pp0_stage6, "ap_block_pp0_stage6");
    sc_trace(mVcdFile, ap_block_pp0_stage7, "ap_block_pp0_stage7");
    sc_trace(mVcdFile, ap_block_pp0_stage8, "ap_block_pp0_stage8");
    sc_trace(mVcdFile, tmp_3_fu_538_p4, "tmp_3_fu_538_p4");
    sc_trace(mVcdFile, tmp_4_fu_554_p4, "tmp_4_fu_554_p4");
    sc_trace(mVcdFile, icmp_fu_548_p2, "icmp_fu_548_p2");
    sc_trace(mVcdFile, icmp3_fu_564_p2, "icmp3_fu_564_p2");
    sc_trace(mVcdFile, idxRow_2_fu_588_p2, "idxRow_2_fu_588_p2");
    sc_trace(mVcdFile, pixConvolved_3_fu_642_p2, "pixConvolved_3_fu_642_p2");
    sc_trace(mVcdFile, col_assign_1_0_2_fu_653_p2, "col_assign_1_0_2_fu_653_p2");
    sc_trace(mVcdFile, pixConvolved_1_fu_665_p3, "pixConvolved_1_fu_665_p3");
    sc_trace(mVcdFile, window_val_1_1_fu_693_p0, "window_val_1_1_fu_693_p0");
    sc_trace(mVcdFile, window_val_1_1_fu_693_p1, "window_val_1_1_fu_693_p1");
    sc_trace(mVcdFile, window_val_0_0_fu_707_p0, "window_val_0_0_fu_707_p0");
    sc_trace(mVcdFile, window_val_0_0_fu_707_p1, "window_val_0_0_fu_707_p1");
    sc_trace(mVcdFile, window_val_2_1_fu_728_p0, "window_val_2_1_fu_728_p0");
    sc_trace(mVcdFile, window_val_2_1_fu_728_p1, "window_val_2_1_fu_728_p1");
    sc_trace(mVcdFile, window_val_2_2_fu_749_p0, "window_val_2_2_fu_749_p0");
    sc_trace(mVcdFile, window_val_2_2_fu_749_p1, "window_val_2_2_fu_749_p1");
    sc_trace(mVcdFile, tmp7_fu_782_p2, "tmp7_fu_782_p2");
    sc_trace(mVcdFile, tmp4_fu_786_p2, "tmp4_fu_786_p2");
    sc_trace(mVcdFile, accumulator_2_2_2_i_fu_790_p2, "accumulator_2_2_2_i_fu_790_p2");
    sc_trace(mVcdFile, tmp_10_tr_fu_796_p1, "tmp_10_tr_fu_796_p1");
    sc_trace(mVcdFile, p_neg_fu_808_p2, "p_neg_fu_808_p2");
    sc_trace(mVcdFile, tmp_6_cast_fu_834_p1, "tmp_6_cast_fu_834_p1");
    sc_trace(mVcdFile, tmp_9_fu_837_p1, "tmp_9_fu_837_p1");
    sc_trace(mVcdFile, tmp_1_fu_840_p2, "tmp_1_fu_840_p2");
    sc_trace(mVcdFile, tmp_10_cast_fu_846_p1, "tmp_10_cast_fu_846_p1");
    sc_trace(mVcdFile, valOutput_fu_850_p3, "valOutput_fu_850_p3");
    sc_trace(mVcdFile, tmp_11_fu_861_p3, "tmp_11_fu_861_p3");
    sc_trace(mVcdFile, tmp_10_fu_857_p1, "tmp_10_fu_857_p1");
    sc_trace(mVcdFile, phitmp1_fu_869_p3, "phitmp1_fu_869_p3");
    sc_trace(mVcdFile, grp_fu_904_p1, "grp_fu_904_p1");
    sc_trace(mVcdFile, grp_fu_911_p1, "grp_fu_911_p1");
    sc_trace(mVcdFile, grp_fu_911_p2, "grp_fu_911_p2");
    sc_trace(mVcdFile, grp_fu_919_p1, "grp_fu_919_p1");
    sc_trace(mVcdFile, grp_fu_926_p1, "grp_fu_926_p1");
    sc_trace(mVcdFile, grp_fu_933_p1, "grp_fu_933_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage7_subdone, "ap_block_pp0_stage7_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_904_p10, "grp_fu_904_p10");
    sc_trace(mVcdFile, grp_fu_911_p10, "grp_fu_911_p10");
    sc_trace(mVcdFile, grp_fu_919_p10, "grp_fu_919_p10");
    sc_trace(mVcdFile, grp_fu_926_p10, "grp_fu_926_p10");
    sc_trace(mVcdFile, grp_fu_933_p10, "grp_fu_933_p10");
    sc_trace(mVcdFile, window_val_0_0_fu_707_p10, "window_val_0_0_fu_707_p10");
    sc_trace(mVcdFile, window_val_1_1_fu_693_p10, "window_val_1_1_fu_693_p10");
    sc_trace(mVcdFile, window_val_2_1_fu_728_p10, "window_val_2_1_fu_728_p10");
    sc_trace(mVcdFile, window_val_2_2_fu_749_p10, "window_val_2_2_fu_749_p10");
    sc_trace(mVcdFile, ap_condition_1859, "ap_condition_1859");
#endif

    }
    mHdltvinHandle.open("doImgproc.hdltvin.dat");
    mHdltvoutHandle.open("doImgproc.hdltvout.dat");
}

doImgproc::~doImgproc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete doImgproc_CRTL_BUS_s_axi_U;
    delete doImgproc_KERNEL_BUS_s_axi_U;
    delete lineBuff_val_0_U;
    delete lineBuff_val_1_U;
    delete lineBuff_val_2_U;
    delete doImgproc_mac_muleOg_U1;
    delete doImgproc_mac_muleOg_U2;
    delete doImgproc_mac_mulfYi_U3;
    delete doImgproc_mac_muleOg_U4;
    delete doImgproc_mac_muleOg_U5;
}

void doImgproc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void doImgproc::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
               esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read())) || 
              (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
               esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage8_subdone.read()))))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage8_subdone.read())))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        col_assign_reg_456 = idxCol_1_reg_1107.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        col_assign_reg_456 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        countWait_1_reg_502 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        countWait_1_reg_502 = countWait_2_reg_1230.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        countWait_reg_490 = phitmp_reg_1197.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        countWait_reg_490 = ap_const_lv17_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        idxRow_reg_467 = idxRow_1_reg_1021.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        idxRow_reg_467 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_out.read()))) {
            inStream_V_data_V_0_sel_rd =  (sc_logic) (~inStream_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_in.read()))) {
            inStream_V_data_V_0_sel_wr =  (sc_logic) (~inStream_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            inStream_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inStream_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()))))) {
            inStream_V_data_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_out.read()))) {
            inStream_V_dest_V_0_sel_rd =  (sc_logic) (~inStream_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_in.read()))) {
            inStream_V_dest_V_0_sel_wr =  (sc_logic) (~inStream_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()))))) {
            inStream_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_out.read()))) {
            inStream_V_id_V_0_sel_rd =  (sc_logic) (~inStream_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_in.read()))) {
            inStream_V_id_V_0_sel_wr =  (sc_logic) (~inStream_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_id_V_0_state.read())))) {
            inStream_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_id_V_0_state.read())))) {
            inStream_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_ack_out.read()))))) {
            inStream_V_id_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_out.read()))) {
            inStream_V_keep_V_0_sel_rd =  (sc_logic) (~inStream_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_in.read()))) {
            inStream_V_keep_V_0_sel_wr =  (sc_logic) (~inStream_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_keep_V_0_state.read())))) {
            inStream_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_keep_V_0_state.read())))) {
            inStream_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_ack_out.read()))))) {
            inStream_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_vld_out.read()))) {
            inStream_V_last_V_0_sel_rd =  (sc_logic) (~inStream_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_ack_in.read()))) {
            inStream_V_last_V_0_sel_wr =  (sc_logic) (~inStream_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_last_V_0_state.read())))) {
            inStream_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_last_V_0_state.read())))) {
            inStream_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_ack_out.read()))))) {
            inStream_V_last_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_out.read()))) {
            inStream_V_strb_V_0_sel_rd =  (sc_logic) (~inStream_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_in.read()))) {
            inStream_V_strb_V_0_sel_wr =  (sc_logic) (~inStream_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_strb_V_0_state.read())))) {
            inStream_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_strb_V_0_state.read())))) {
            inStream_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_ack_out.read()))))) {
            inStream_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_out.read()))) {
            inStream_V_user_V_0_sel_rd =  (sc_logic) (~inStream_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_in.read()))) {
            inStream_V_user_V_0_sel_wr =  (sc_logic) (~inStream_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_user_V_0_state.read())))) {
            inStream_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_user_V_0_state.read())))) {
            inStream_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_ack_out.read()))))) {
            inStream_V_user_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_out.read()))) {
            outStream_V_data_V_1_sel_rd =  (sc_logic) (~outStream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_in.read()))) {
            outStream_V_data_V_1_sel_wr =  (sc_logic) (~outStream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_data_V_1_state.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_data_V_1_state.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()))))) {
            outStream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_out.read()))) {
            outStream_V_dest_V_1_sel_rd =  (sc_logic) (~outStream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_in.read()))) {
            outStream_V_dest_V_1_sel_wr =  (sc_logic) (~outStream_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()))))) {
            outStream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_out.read()))) {
            outStream_V_id_V_1_sel_rd =  (sc_logic) (~outStream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_in.read()))) {
            outStream_V_id_V_1_sel_wr =  (sc_logic) (~outStream_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()))))) {
            outStream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_out.read()))) {
            outStream_V_keep_V_1_sel_rd =  (sc_logic) (~outStream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_in.read()))) {
            outStream_V_keep_V_1_sel_wr =  (sc_logic) (~outStream_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()))))) {
            outStream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_out.read()))) {
            outStream_V_last_V_1_sel_rd =  (sc_logic) (~outStream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_in.read()))) {
            outStream_V_last_V_1_sel_wr =  (sc_logic) (~outStream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()))))) {
            outStream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_out.read()))) {
            outStream_V_strb_V_1_sel_rd =  (sc_logic) (~outStream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_in.read()))) {
            outStream_V_strb_V_1_sel_wr =  (sc_logic) (~outStream_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()))))) {
            outStream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_out.read()))) {
            outStream_V_user_V_1_sel_rd =  (sc_logic) (~outStream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_in.read()))) {
            outStream_V_user_V_1_sel_wr =  (sc_logic) (~outStream_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()))))) {
            outStream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985_pp0_iter1_reg.read()))) {
        pixConvolved_reg_478 = pixConvolved_2_reg_1112.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        pixConvolved_reg_478 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_condition_1859.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
            reg_517 = lineBuff_val_0_q1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
            reg_517 = lineBuff_val_0_q0.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)))) {
        countWait_2_reg_1230 = countWait_2_fu_891_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985_pp0_iter1_reg.read()))) {
        dataOutSideChannel_d_reg_443 = tmp_dest_V_reg_1059_pp0_iter1_reg.read();
        dataOutSideChannel_i_reg_391 = tmp_id_V_reg_1053_pp0_iter1_reg.read();
        dataOutSideChannel_k_reg_430 = tmp_keep_V_reg_1030_pp0_iter1_reg.read();
        dataOutSideChannel_s_reg_417 = tmp_strb_V_reg_1036_pp0_iter1_reg.read();
        dataOutSideChannel_u_reg_404 = tmp_user_V_reg_1042_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_985 = exitcond1_fu_526_p2.read();
        exitcond1_reg_985_pp0_iter1_reg = exitcond1_reg_985.read();
        or_cond_reg_1004_pp0_iter1_reg = or_cond_reg_1004.read();
        tmp_13_reg_1026_pp0_iter1_reg = tmp_13_reg_1026.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        idxCol_1_reg_1107 = idxCol_1_fu_672_p3.read();
        pixConvolved_2_reg_1112 = pixConvolved_2_fu_678_p3.read();
        tmp_dest_V_reg_1059 = inStream_V_dest_V_0_data_out.read();
        tmp_id_V_reg_1053 = inStream_V_id_V_0_data_out.read();
        tmp_keep_V_reg_1030 = inStream_V_keep_V_0_data_out.read();
        tmp_strb_V_reg_1036 = inStream_V_strb_V_0_data_out.read();
        tmp_user_V_reg_1042 = inStream_V_user_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_526_p2.read()))) {
        idxCol_reg_1016 = idxCol_fu_582_p2.read();
        lineBuff_val_1_addr_reg_994 =  (sc_lv<8>) (tmp_s_fu_532_p1.read());
        lineBuff_val_2_addr_reg_999 =  (sc_lv<8>) (tmp_s_fu_532_p1.read());
        or_cond_reg_1004 = or_cond_fu_570_p2.read();
        tmp_12_reg_1010 = tmp_12_fu_576_p2.read();
        tmp_13_reg_1026 = tmp_13_fu_602_p2.read();
        tmp_s_reg_989 = tmp_s_fu_532_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_526_p2.read()))) {
        idxRow_1_reg_1021 = idxRow_1_fu_594_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_A.read())) {
        inStream_V_data_V_0_payload_A = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_B.read())) {
        inStream_V_data_V_0_payload_B = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_load_A.read())) {
        inStream_V_dest_V_0_payload_A = inStream_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_load_B.read())) {
        inStream_V_dest_V_0_payload_B = inStream_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_load_A.read())) {
        inStream_V_id_V_0_payload_A = inStream_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_load_B.read())) {
        inStream_V_id_V_0_payload_B = inStream_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_load_A.read())) {
        inStream_V_keep_V_0_payload_A = inStream_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_load_B.read())) {
        inStream_V_keep_V_0_payload_B = inStream_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_load_A.read())) {
        inStream_V_last_V_0_payload_A = inStream_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_load_B.read())) {
        inStream_V_last_V_0_payload_B = inStream_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_load_A.read())) {
        inStream_V_strb_V_0_payload_A = inStream_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_load_B.read())) {
        inStream_V_strb_V_0_payload_B = inStream_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_load_A.read())) {
        inStream_V_user_V_0_payload_A = inStream_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_load_B.read())) {
        inStream_V_user_V_0_payload_B = inStream_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        kernel_load_7_reg_1102 = kernel_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()))) {
        lineBuff_val_0_load_2_reg_1122 = lineBuff_val_0_q1.read();
        lineBuff_val_1_load_3_reg_1137 = lineBuff_val_1_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_1_load_1_reg_1157 = lineBuff_val_1_q1.read();
        lineBuff_val_2_load_1_reg_1162 = lineBuff_val_2_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_A.read())) {
        outStream_V_data_V_1_payload_A = outStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_B.read())) {
        outStream_V_data_V_1_payload_B = outStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_load_A.read())) {
        outStream_V_dest_V_1_payload_A = outStream_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_load_B.read())) {
        outStream_V_dest_V_1_payload_B = outStream_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_load_A.read())) {
        outStream_V_id_V_1_payload_A = outStream_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_load_B.read())) {
        outStream_V_id_V_1_payload_B = outStream_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_load_A.read())) {
        outStream_V_keep_V_1_payload_A = outStream_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_load_B.read())) {
        outStream_V_keep_V_1_payload_B = outStream_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_A.read())) {
        outStream_V_last_V_1_payload_A = outStream_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_B.read())) {
        outStream_V_last_V_1_payload_B = outStream_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_load_A.read())) {
        outStream_V_strb_V_1_payload_A = outStream_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_load_B.read())) {
        outStream_V_strb_V_1_payload_B = outStream_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_A.read())) {
        outStream_V_user_V_1_payload_A = outStream_V_user_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_B.read())) {
        outStream_V_user_V_1_payload_B = outStream_V_user_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0))) {
        phitmp_reg_1197 = phitmp_fu_769_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read())))) {
        reg_513 = kernel_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)))) {
        reg_522 = lineBuff_val_2_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        tmp1_reg_1177 = grp_fu_904_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        tmp2_reg_1182 = grp_fu_911_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0))) {
        tmp3_reg_1187 = grp_fu_919_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp8_reg_1202 = grp_fu_933_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0))) {
        tmp9_reg_1192 = grp_fu_926_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        tmp_20_0_1_reg_1076 = tmp_20_0_1_fu_648_p1.read();
        tmp_20_0_2_reg_1082 = tmp_20_0_2_fu_659_p1.read();
        tmp_6_reg_1065 = tmp_6_fu_637_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004_pp0_iter1_reg.read()))) {
        tmp_5_reg_1207 = accumulator_2_2_2_i_fu_790_p2.read().range(15, 15);
        tmp_7_reg_1212 = p_neg_fu_808_p2.read().range(16, 3);
        tmp_8_reg_1217 = accumulator_2_2_2_i_fu_790_p2.read().range(15, 3);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        tmp_dest_V_reg_1059_pp0_iter1_reg = tmp_dest_V_reg_1059.read();
        tmp_id_V_reg_1053_pp0_iter1_reg = tmp_id_V_reg_1053.read();
        tmp_keep_V_reg_1030_pp0_iter1_reg = tmp_keep_V_reg_1030.read();
        tmp_strb_V_reg_1036_pp0_iter1_reg = tmp_strb_V_reg_1036.read();
        tmp_user_V_reg_1042_pp0_iter1_reg = tmp_user_V_reg_1042.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_reg_1048 = inStream_V_last_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        window_val_0_0_reg_1152 = window_val_0_0_fu_707_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()))) {
        window_val_1_1_reg_1132 = window_val_1_1_fu_693_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        window_val_2_1_reg_1172 = window_val_2_1_fu_728_p2.read();
    }
}

void doImgproc::thread_accumulator_2_2_2_i_fu_790_p2() {
    accumulator_2_2_2_i_fu_790_p2 = (!tmp7_fu_782_p2.read().is_01() || !tmp4_fu_786_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp7_fu_782_p2.read()) + sc_biguint<16>(tmp4_fu_786_p2.read()));
}

void doImgproc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[3];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[4];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[5];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[6];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[7];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[8];
}

void doImgproc::thread_ap_CS_fsm_pp0_stage8() {
    ap_CS_fsm_pp0_stage8 = ap_CS_fsm.read()[9];
}

void doImgproc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void doImgproc::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[10];
}

void doImgproc::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[11];
}

void doImgproc::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[12];
}

void doImgproc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage2_01001() {
    ap_block_pp0_stage2_01001 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()));
}

void doImgproc::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())));
}

void doImgproc::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())));
}

void doImgproc::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage3_01001() {
    ap_block_pp0_stage3_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read()));
}

void doImgproc::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read()));
}

void doImgproc::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage5() {
    ap_block_pp0_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage5_11001() {
    ap_block_pp0_stage5_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage6() {
    ap_block_pp0_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage6_11001() {
    ap_block_pp0_stage6_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage7() {
    ap_block_pp0_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage7_11001() {
    ap_block_pp0_stage7_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage7_subdone() {
    ap_block_pp0_stage7_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage8() {
    ap_block_pp0_stage8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage8_11001() {
    ap_block_pp0_stage8_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_pp0_stage8_subdone() {
    ap_block_pp0_stage8_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state10_pp0_stage8_iter0() {
    ap_block_state10_pp0_stage8_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state12_pp0_stage1_iter1() {
    ap_block_state12_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state13_io() {
    ap_block_state13_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void doImgproc::thread_ap_block_state13_pp0_stage2_iter1() {
    ap_block_state13_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void doImgproc::thread_ap_block_state14_pp0_stage3_iter1() {
    ap_block_state14_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0));
}

void doImgproc::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void doImgproc::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state4_pp0_stage2_iter0() {
    ap_block_state4_pp0_stage2_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()));
}

void doImgproc::thread_ap_block_state5_pp0_stage3_iter0() {
    ap_block_state5_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state6_pp0_stage4_iter0() {
    ap_block_state6_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state7_pp0_stage5_iter0() {
    ap_block_state7_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state8_pp0_stage6_iter0() {
    ap_block_state8_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_block_state9_pp0_stage7_iter0() {
    ap_block_state9_pp0_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void doImgproc::thread_ap_condition_1859() {
    ap_condition_1859 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1004.read()));
}

void doImgproc::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond1_fu_526_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void doImgproc::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void doImgproc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void doImgproc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void doImgproc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void doImgproc::thread_ap_phi_mux_col_assign_phi_fu_460_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_col_assign_phi_fu_460_p4 = idxCol_1_reg_1107.read();
    } else {
        ap_phi_mux_col_assign_phi_fu_460_p4 = col_assign_reg_456.read();
    }
}

void doImgproc::thread_ap_phi_mux_countWait_phi_fu_494_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_countWait_phi_fu_494_p4 = phitmp_reg_1197.read();
    } else {
        ap_phi_mux_countWait_phi_fu_494_p4 = countWait_reg_490.read();
    }
}

void doImgproc::thread_ap_phi_mux_idxRow_phi_fu_471_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_idxRow_phi_fu_471_p4 = idxRow_1_reg_1021.read();
    } else {
        ap_phi_mux_idxRow_phi_fu_471_p4 = idxRow_reg_467.read();
    }
}

void doImgproc::thread_ap_phi_mux_pixConvolved_phi_fu_482_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985_pp0_iter1_reg.read()))) {
        ap_phi_mux_pixConvolved_phi_fu_482_p4 = pixConvolved_2_reg_1112.read();
    } else {
        ap_phi_mux_pixConvolved_phi_fu_482_p4 = pixConvolved_reg_478.read();
    }
}

void doImgproc::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void doImgproc::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void doImgproc::thread_col_assign_1_0_2_fu_653_p2() {
    col_assign_1_0_2_fu_653_p2 = (!ap_const_lv32_2.is_01() || !ap_phi_mux_pixConvolved_phi_fu_482_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_2) + sc_biguint<32>(ap_phi_mux_pixConvolved_phi_fu_482_p4.read()));
}

void doImgproc::thread_countWait_2_fu_891_p2() {
    countWait_2_fu_891_p2 = (!countWait_1_reg_502.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(countWait_1_reg_502.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void doImgproc::thread_dataOutSideChannel_d_1_fu_877_p3() {
    dataOutSideChannel_d_1_fu_877_p3 = (!or_cond_reg_1004_pp0_iter1_reg.read()[0].is_01())? sc_lv<8>(): ((or_cond_reg_1004_pp0_iter1_reg.read()[0].to_bool())? phitmp1_fu_869_p3.read(): ap_const_lv8_0);
}

void doImgproc::thread_dataOutSideChannel_l_fu_897_p2() {
    dataOutSideChannel_l_fu_897_p2 = (!countWait_1_reg_502.read().is_01() || !ap_const_lv8_EF.is_01())? sc_lv<1>(): (sc_biguint<8>(countWait_1_reg_502.read()) > sc_biguint<8>(ap_const_lv8_EF));
}

void doImgproc::thread_exitcond1_fu_526_p2() {
    exitcond1_fu_526_p2 = (!ap_phi_mux_countWait_phi_fu_494_p4.read().is_01() || !ap_const_lv17_12C01.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_countWait_phi_fu_494_p4.read() == ap_const_lv17_12C01);
}

void doImgproc::thread_exitcond_fu_885_p2() {
    exitcond_fu_885_p2 = (!countWait_1_reg_502.read().is_01() || !ap_const_lv8_F1.is_01())? sc_lv<1>(): sc_lv<1>(countWait_1_reg_502.read() == ap_const_lv8_F1);
}

void doImgproc::thread_grp_fu_904_p1() {
    grp_fu_904_p1 =  (sc_lv<8>) (grp_fu_904_p10.read());
}

void doImgproc::thread_grp_fu_904_p10() {
    grp_fu_904_p10 = esl_zext<16,8>(reg_517.read());
}

void doImgproc::thread_grp_fu_911_p1() {
    grp_fu_911_p1 =  (sc_lv<8>) (grp_fu_911_p10.read());
}

void doImgproc::thread_grp_fu_911_p10() {
    grp_fu_911_p10 = esl_zext<16,8>(lineBuff_val_0_load_2_reg_1122.read());
}

void doImgproc::thread_grp_fu_911_p2() {
    grp_fu_911_p2 = (!window_val_2_2_fu_749_p0.read().is_01() || !window_val_2_2_fu_749_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_2_2_fu_749_p0.read()) * sc_biguint<8>(window_val_2_2_fu_749_p1.read());
}

void doImgproc::thread_grp_fu_919_p1() {
    grp_fu_919_p1 =  (sc_lv<8>) (grp_fu_919_p10.read());
}

void doImgproc::thread_grp_fu_919_p10() {
    grp_fu_919_p10 = esl_zext<16,8>(lineBuff_val_1_load_1_reg_1157.read());
}

void doImgproc::thread_grp_fu_926_p1() {
    grp_fu_926_p1 =  (sc_lv<8>) (grp_fu_926_p10.read());
}

void doImgproc::thread_grp_fu_926_p10() {
    grp_fu_926_p10 = esl_zext<16,8>(lineBuff_val_1_load_3_reg_1137.read());
}

void doImgproc::thread_grp_fu_933_p1() {
    grp_fu_933_p1 =  (sc_lv<8>) (grp_fu_933_p10.read());
}

void doImgproc::thread_grp_fu_933_p10() {
    grp_fu_933_p10 = esl_zext<16,8>(lineBuff_val_2_load_1_reg_1162.read());
}

void doImgproc::thread_icmp3_fu_564_p2() {
    icmp3_fu_564_p2 = (!tmp_4_fu_554_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_4_fu_554_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void doImgproc::thread_icmp_fu_548_p2() {
    icmp_fu_548_p2 = (!tmp_3_fu_538_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_3_fu_538_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void doImgproc::thread_idxCol_1_fu_672_p3() {
    idxCol_1_fu_672_p3 = (!tmp_12_reg_1010.read()[0].is_01())? sc_lv<32>(): ((tmp_12_reg_1010.read()[0].to_bool())? idxCol_reg_1016.read(): ap_const_lv32_0);
}

void doImgproc::thread_idxCol_fu_582_p2() {
    idxCol_fu_582_p2 = (!ap_const_lv32_1.is_01() || !ap_phi_mux_col_assign_phi_fu_460_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(ap_phi_mux_col_assign_phi_fu_460_p4.read()));
}

void doImgproc::thread_idxRow_1_fu_594_p3() {
    idxRow_1_fu_594_p3 = (!tmp_12_fu_576_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_12_fu_576_p2.read()[0].to_bool())? ap_phi_mux_idxRow_phi_fu_471_p4.read(): idxRow_2_fu_588_p2.read());
}

void doImgproc::thread_idxRow_2_fu_588_p2() {
    idxRow_2_fu_588_p2 = (!ap_const_lv32_1.is_01() || !ap_phi_mux_idxRow_phi_fu_471_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(ap_phi_mux_idxRow_phi_fu_471_p4.read()));
}

void doImgproc::thread_inStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()))) {
        inStream_TDATA_blk_n = inStream_V_data_V_0_state.read()[0];
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void doImgproc::thread_inStream_TREADY() {
    inStream_TREADY = inStream_V_dest_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_data_V_0_ack_in() {
    inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_sel.read())) {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B.read();
    } else {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_data_V_0_load_A() {
    inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full.read() & ~inStream_V_data_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_data_V_0_load_B() {
    inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr.read() & inStream_V_data_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_data_V_0_sel() {
    inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_data_V_0_state_cmp_full() {
    inStream_V_data_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_data_V_0_vld_in() {
    inStream_V_data_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_data_V_0_vld_out() {
    inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state.read()[0];
}

void doImgproc::thread_inStream_V_dest_V_0_ack_in() {
    inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_sel.read())) {
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B.read();
    } else {
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_dest_V_0_load_A() {
    inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full.read() & ~inStream_V_dest_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_dest_V_0_load_B() {
    inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_sel_wr.read() & inStream_V_dest_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_dest_V_0_sel() {
    inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_dest_V_0_state_cmp_full() {
    inStream_V_dest_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_dest_V_0_vld_in() {
    inStream_V_dest_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_dest_V_0_vld_out() {
    inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state.read()[0];
}

void doImgproc::thread_inStream_V_id_V_0_ack_in() {
    inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_id_V_0_sel.read())) {
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B.read();
    } else {
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_id_V_0_load_A() {
    inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full.read() & ~inStream_V_id_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_id_V_0_load_B() {
    inStream_V_id_V_0_load_B = (inStream_V_id_V_0_sel_wr.read() & inStream_V_id_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_id_V_0_sel() {
    inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_id_V_0_state_cmp_full() {
    inStream_V_id_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_id_V_0_vld_in() {
    inStream_V_id_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_id_V_0_vld_out() {
    inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state.read()[0];
}

void doImgproc::thread_inStream_V_keep_V_0_ack_in() {
    inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_keep_V_0_sel.read())) {
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B.read();
    } else {
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_keep_V_0_load_A() {
    inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full.read() & ~inStream_V_keep_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_keep_V_0_load_B() {
    inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_sel_wr.read() & inStream_V_keep_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_keep_V_0_sel() {
    inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_keep_V_0_state_cmp_full() {
    inStream_V_keep_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_keep_V_0_vld_in() {
    inStream_V_keep_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_keep_V_0_vld_out() {
    inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state.read()[0];
}

void doImgproc::thread_inStream_V_last_V_0_ack_in() {
    inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_last_V_0_sel.read())) {
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B.read();
    } else {
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_last_V_0_load_A() {
    inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full.read() & ~inStream_V_last_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_last_V_0_load_B() {
    inStream_V_last_V_0_load_B = (inStream_V_last_V_0_sel_wr.read() & inStream_V_last_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_last_V_0_sel() {
    inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_last_V_0_state_cmp_full() {
    inStream_V_last_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_last_V_0_vld_in() {
    inStream_V_last_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_last_V_0_vld_out() {
    inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state.read()[0];
}

void doImgproc::thread_inStream_V_strb_V_0_ack_in() {
    inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_strb_V_0_sel.read())) {
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B.read();
    } else {
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_strb_V_0_load_A() {
    inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full.read() & ~inStream_V_strb_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_strb_V_0_load_B() {
    inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_sel_wr.read() & inStream_V_strb_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_strb_V_0_sel() {
    inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_strb_V_0_state_cmp_full() {
    inStream_V_strb_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_strb_V_0_vld_in() {
    inStream_V_strb_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_strb_V_0_vld_out() {
    inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state.read()[0];
}

void doImgproc::thread_inStream_V_user_V_0_ack_in() {
    inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state.read()[1];
}

void doImgproc::thread_inStream_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        inStream_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void doImgproc::thread_inStream_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_user_V_0_sel.read())) {
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B.read();
    } else {
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A.read();
    }
}

void doImgproc::thread_inStream_V_user_V_0_load_A() {
    inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full.read() & ~inStream_V_user_V_0_sel_wr.read());
}

void doImgproc::thread_inStream_V_user_V_0_load_B() {
    inStream_V_user_V_0_load_B = (inStream_V_user_V_0_sel_wr.read() & inStream_V_user_V_0_state_cmp_full.read());
}

void doImgproc::thread_inStream_V_user_V_0_sel() {
    inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd.read();
}

void doImgproc::thread_inStream_V_user_V_0_state_cmp_full() {
    inStream_V_user_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_inStream_V_user_V_0_vld_in() {
    inStream_V_user_V_0_vld_in = inStream_TVALID.read();
}

void doImgproc::thread_inStream_V_user_V_0_vld_out() {
    inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state.read()[0];
}

void doImgproc::thread_kernel_address0() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage8.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_6);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_5);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_3);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_1);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_0);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_8);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_7);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            kernel_address0 =  (sc_lv<4>) (ap_const_lv64_4);
        } else {
            kernel_address0 = "XXXX";
        }
    } else {
        kernel_address0 = "XXXX";
    }
}

void doImgproc::thread_kernel_ce0() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0)))) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_0_address0() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address0 =  (sc_lv<8>) (tmp_6_fu_637_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address0 =  (sc_lv<8>) (tmp_s_reg_989.read());
        } else {
            lineBuff_val_0_address0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_0_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_lineBuff_val_0_address1() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address1 =  (sc_lv<8>) (tmp_20_0_1_reg_1076.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_0_address1 =  (sc_lv<8>) (tmp_20_0_2_fu_659_p1.read());
        } else {
            lineBuff_val_0_address1 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_0_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_lineBuff_val_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_0_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce0 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_0_ce1() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_0_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce1 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_0_we0() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_0_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_we0 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_1_address0() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 =  (sc_lv<8>) (tmp_20_0_1_fu_648_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_994.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 =  (sc_lv<8>) (tmp_s_fu_532_p1.read());
        } else {
            lineBuff_val_1_address0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_1_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_lineBuff_val_1_address1() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address1 =  (sc_lv<8>) (tmp_6_reg_1065.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address1 =  (sc_lv<8>) (tmp_20_0_2_fu_659_p1.read());
        } else {
            lineBuff_val_1_address1 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_1_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_lineBuff_val_1_ce0() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_1_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce0 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_1_ce1() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_1_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce1 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_1_we0() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_1_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_we0 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_2_address0() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 =  (sc_lv<8>) (tmp_6_reg_1065.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_999.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 =  (sc_lv<8>) (tmp_s_fu_532_p1.read());
        } else {
            lineBuff_val_2_address0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_2_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_lineBuff_val_2_address1() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address1 =  (sc_lv<8>) (tmp_20_0_2_reg_1082.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address1 =  (sc_lv<8>) (tmp_20_0_1_reg_1076.read());
        } else {
            lineBuff_val_2_address1 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        lineBuff_val_2_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_lineBuff_val_2_ce0() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_2_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce0 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_2_ce1() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_2_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce1 = ap_const_logic_0;
    }
}

void doImgproc::thread_lineBuff_val_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_985.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_2_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_we0 = ap_const_logic_0;
    }
}

void doImgproc::thread_or_cond_fu_570_p2() {
    or_cond_fu_570_p2 = (icmp_fu_548_p2.read() & icmp3_fu_564_p2.read());
}

void doImgproc::thread_outStream_TDATA() {
    outStream_TDATA = outStream_V_data_V_1_data_out.read();
}

void doImgproc::thread_outStream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        outStream_TDATA_blk_n = outStream_V_data_V_1_state.read()[1];
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void doImgproc::thread_outStream_TDEST() {
    outStream_TDEST = outStream_V_dest_V_1_data_out.read();
}

void doImgproc::thread_outStream_TID() {
    outStream_TID = outStream_V_id_V_1_data_out.read();
}

void doImgproc::thread_outStream_TKEEP() {
    outStream_TKEEP = outStream_V_keep_V_1_data_out.read();
}

void doImgproc::thread_outStream_TLAST() {
    outStream_TLAST = outStream_V_last_V_1_data_out.read();
}

void doImgproc::thread_outStream_TSTRB() {
    outStream_TSTRB = outStream_V_strb_V_1_data_out.read();
}

void doImgproc::thread_outStream_TUSER() {
    outStream_TUSER = outStream_V_user_V_1_data_out.read();
}

void doImgproc::thread_outStream_TVALID() {
    outStream_TVALID = outStream_V_dest_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_data_V_1_ack_in() {
    outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_data_V_1_ack_out() {
    outStream_V_data_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_data_V_1_data_in = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_data_V_1_data_in = dataOutSideChannel_d_1_fu_877_p3.read();
    } else {
        outStream_V_data_V_1_data_in =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void doImgproc::thread_outStream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_sel.read())) {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B.read();
    } else {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_data_V_1_load_A() {
    outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full.read() & ~outStream_V_data_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_data_V_1_load_B() {
    outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr.read() & outStream_V_data_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_data_V_1_sel() {
    outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_data_V_1_state_cmp_full() {
    outStream_V_data_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_data_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_data_V_1_vld_out() {
    outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_dest_V_1_ack_in() {
    outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_dest_V_1_ack_out() {
    outStream_V_dest_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_dest_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_dest_V_1_data_in = dataOutSideChannel_d_reg_443.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_dest_V_1_data_in = tmp_dest_V_reg_1059.read();
    } else {
        outStream_V_dest_V_1_data_in =  (sc_lv<6>) ("XXXXXX");
    }
}

void doImgproc::thread_outStream_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_sel.read())) {
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B.read();
    } else {
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_dest_V_1_load_A() {
    outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full.read() & ~outStream_V_dest_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_dest_V_1_load_B() {
    outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_sel_wr.read() & outStream_V_dest_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_dest_V_1_sel() {
    outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_dest_V_1_state_cmp_full() {
    outStream_V_dest_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_dest_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_dest_V_1_vld_out() {
    outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_id_V_1_ack_in() {
    outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_id_V_1_ack_out() {
    outStream_V_id_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_id_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_id_V_1_data_in = dataOutSideChannel_i_reg_391.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_id_V_1_data_in = tmp_id_V_reg_1053.read();
    } else {
        outStream_V_id_V_1_data_in =  (sc_lv<5>) ("XXXXX");
    }
}

void doImgproc::thread_outStream_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_sel.read())) {
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B.read();
    } else {
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_id_V_1_load_A() {
    outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full.read() & ~outStream_V_id_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_id_V_1_load_B() {
    outStream_V_id_V_1_load_B = (outStream_V_id_V_1_sel_wr.read() & outStream_V_id_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_id_V_1_sel() {
    outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_id_V_1_state_cmp_full() {
    outStream_V_id_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_id_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_id_V_1_vld_out() {
    outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_keep_V_1_ack_in() {
    outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_keep_V_1_ack_out() {
    outStream_V_keep_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_keep_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_keep_V_1_data_in = dataOutSideChannel_k_reg_430.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_keep_V_1_data_in = tmp_keep_V_reg_1030.read();
    } else {
        outStream_V_keep_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void doImgproc::thread_outStream_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_sel.read())) {
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B.read();
    } else {
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_keep_V_1_load_A() {
    outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full.read() & ~outStream_V_keep_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_keep_V_1_load_B() {
    outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_sel_wr.read() & outStream_V_keep_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_keep_V_1_sel() {
    outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_keep_V_1_state_cmp_full() {
    outStream_V_keep_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_keep_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_keep_V_1_vld_out() {
    outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_last_V_1_ack_in() {
    outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_last_V_1_ack_out() {
    outStream_V_last_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_last_V_1_data_in = dataOutSideChannel_l_fu_897_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_last_V_1_data_in = tmp_last_V_reg_1048.read();
    } else {
        outStream_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void doImgproc::thread_outStream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_sel.read())) {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B.read();
    } else {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_last_V_1_load_A() {
    outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full.read() & ~outStream_V_last_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_last_V_1_load_B() {
    outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr.read() & outStream_V_last_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_last_V_1_sel() {
    outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_last_V_1_state_cmp_full() {
    outStream_V_last_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_last_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_last_V_1_vld_out() {
    outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_strb_V_1_ack_in() {
    outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_strb_V_1_ack_out() {
    outStream_V_strb_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_strb_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_strb_V_1_data_in = dataOutSideChannel_s_reg_417.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_strb_V_1_data_in = tmp_strb_V_reg_1036.read();
    } else {
        outStream_V_strb_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void doImgproc::thread_outStream_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_sel.read())) {
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B.read();
    } else {
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_strb_V_1_load_A() {
    outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full.read() & ~outStream_V_strb_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_strb_V_1_load_B() {
    outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_sel_wr.read() & outStream_V_strb_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_strb_V_1_sel() {
    outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_strb_V_1_state_cmp_full() {
    outStream_V_strb_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_strb_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_strb_V_1_vld_out() {
    outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state.read()[0];
}

void doImgproc::thread_outStream_V_user_V_1_ack_in() {
    outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state.read()[1];
}

void doImgproc::thread_outStream_V_user_V_1_ack_out() {
    outStream_V_user_V_1_ack_out = outStream_TREADY.read();
}

void doImgproc::thread_outStream_V_user_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        outStream_V_user_V_1_data_in = dataOutSideChannel_u_reg_404.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        outStream_V_user_V_1_data_in = tmp_user_V_reg_1042.read();
    } else {
        outStream_V_user_V_1_data_in =  (sc_lv<2>) ("XX");
    }
}

void doImgproc::thread_outStream_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_sel.read())) {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B.read();
    } else {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A.read();
    }
}

void doImgproc::thread_outStream_V_user_V_1_load_A() {
    outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full.read() & ~outStream_V_user_V_1_sel_wr.read());
}

void doImgproc::thread_outStream_V_user_V_1_load_B() {
    outStream_V_user_V_1_load_B = (outStream_V_user_V_1_sel_wr.read() & outStream_V_user_V_1_state_cmp_full.read());
}

void doImgproc::thread_outStream_V_user_V_1_sel() {
    outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd.read();
}

void doImgproc::thread_outStream_V_user_V_1_state_cmp_full() {
    outStream_V_user_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void doImgproc::thread_outStream_V_user_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_13_reg_1026_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        outStream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void doImgproc::thread_outStream_V_user_V_1_vld_out() {
    outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state.read()[0];
}

void doImgproc::thread_p_neg_fu_808_p2() {
    p_neg_fu_808_p2 = (!ap_const_lv17_0.is_01() || !tmp_10_tr_fu_796_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(ap_const_lv17_0) - sc_bigint<17>(tmp_10_tr_fu_796_p1.read()));
}

void doImgproc::thread_phitmp1_fu_869_p3() {
    phitmp1_fu_869_p3 = (!tmp_11_fu_861_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_11_fu_861_p3.read()[0].to_bool())? ap_const_lv8_0: tmp_10_fu_857_p1.read());
}

void doImgproc::thread_phitmp_fu_769_p2() {
    phitmp_fu_769_p2 = (!countWait_reg_490.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(countWait_reg_490.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void doImgproc::thread_pixConvolved_1_fu_665_p3() {
    pixConvolved_1_fu_665_p3 = (!or_cond_reg_1004.read()[0].is_01())? sc_lv<32>(): ((or_cond_reg_1004.read()[0].to_bool())? pixConvolved_3_fu_642_p2.read(): ap_phi_mux_pixConvolved_phi_fu_482_p4.read());
}

void doImgproc::thread_pixConvolved_2_fu_678_p3() {
    pixConvolved_2_fu_678_p3 = (!tmp_12_reg_1010.read()[0].is_01())? sc_lv<32>(): ((tmp_12_reg_1010.read()[0].to_bool())? pixConvolved_1_fu_665_p3.read(): ap_const_lv32_0);
}

void doImgproc::thread_pixConvolved_3_fu_642_p2() {
    pixConvolved_3_fu_642_p2 = (!ap_const_lv32_1.is_01() || !ap_phi_mux_pixConvolved_phi_fu_482_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(ap_phi_mux_pixConvolved_phi_fu_482_p4.read()));
}

void doImgproc::thread_tmp4_fu_786_p2() {
    tmp4_fu_786_p2 = (!tmp1_reg_1177.read().is_01() || !tmp3_reg_1187.read().is_01())? sc_lv<16>(): (sc_bigint<16>(tmp1_reg_1177.read()) + sc_bigint<16>(tmp3_reg_1187.read()));
}

void doImgproc::thread_tmp7_fu_782_p2() {
    tmp7_fu_782_p2 = (!tmp8_reg_1202.read().is_01() || !tmp9_reg_1192.read().is_01())? sc_lv<16>(): (sc_bigint<16>(tmp8_reg_1202.read()) + sc_bigint<16>(tmp9_reg_1192.read()));
}

void doImgproc::thread_tmp_10_cast_fu_846_p1() {
    tmp_10_cast_fu_846_p1 = esl_zext<15,14>(tmp_9_fu_837_p1.read());
}

void doImgproc::thread_tmp_10_fu_857_p1() {
    tmp_10_fu_857_p1 = valOutput_fu_850_p3.read().range(8-1, 0);
}

void doImgproc::thread_tmp_10_tr_fu_796_p1() {
    tmp_10_tr_fu_796_p1 = esl_sext<17,16>(accumulator_2_2_2_i_fu_790_p2.read());
}

void doImgproc::thread_tmp_11_fu_861_p3() {
    tmp_11_fu_861_p3 = valOutput_fu_850_p3.read().range(14, 14);
}

void doImgproc::thread_tmp_12_fu_576_p2() {
    tmp_12_fu_576_p2 = (!ap_phi_mux_col_assign_phi_fu_460_p4.read().is_01() || !ap_const_lv32_EF.is_01())? sc_lv<1>(): (sc_bigint<32>(ap_phi_mux_col_assign_phi_fu_460_p4.read()) < sc_bigint<32>(ap_const_lv32_EF));
}

void doImgproc::thread_tmp_13_fu_602_p2() {
    tmp_13_fu_602_p2 = (!ap_phi_mux_countWait_phi_fu_494_p4.read().is_01() || !ap_const_lv17_F1.is_01())? sc_lv<1>(): (sc_biguint<17>(ap_phi_mux_countWait_phi_fu_494_p4.read()) > sc_biguint<17>(ap_const_lv17_F1));
}

void doImgproc::thread_tmp_1_fu_840_p2() {
    tmp_1_fu_840_p2 = (!ap_const_lv15_0.is_01() || !tmp_6_cast_fu_834_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(ap_const_lv15_0) - sc_biguint<15>(tmp_6_cast_fu_834_p1.read()));
}

void doImgproc::thread_tmp_20_0_1_fu_648_p1() {
    tmp_20_0_1_fu_648_p1 = esl_zext<64,32>(pixConvolved_3_fu_642_p2.read());
}

void doImgproc::thread_tmp_20_0_2_fu_659_p1() {
    tmp_20_0_2_fu_659_p1 = esl_zext<64,32>(col_assign_1_0_2_fu_653_p2.read());
}

void doImgproc::thread_tmp_3_fu_538_p4() {
    tmp_3_fu_538_p4 = ap_phi_mux_idxRow_phi_fu_471_p4.read().range(31, 1);
}

void doImgproc::thread_tmp_4_fu_554_p4() {
    tmp_4_fu_554_p4 = ap_phi_mux_col_assign_phi_fu_460_p4.read().range(31, 1);
}

void doImgproc::thread_tmp_6_cast_fu_834_p1() {
    tmp_6_cast_fu_834_p1 = esl_zext<15,14>(tmp_7_reg_1212.read());
}

void doImgproc::thread_tmp_6_fu_637_p1() {
    tmp_6_fu_637_p1 = esl_zext<64,32>(ap_phi_mux_pixConvolved_phi_fu_482_p4.read());
}

void doImgproc::thread_tmp_9_fu_837_p1() {
    tmp_9_fu_837_p1 = esl_sext<14,13>(tmp_8_reg_1217.read());
}

void doImgproc::thread_tmp_s_fu_532_p1() {
    tmp_s_fu_532_p1 = esl_zext<64,32>(ap_phi_mux_col_assign_phi_fu_460_p4.read());
}

void doImgproc::thread_valOutput_fu_850_p3() {
    valOutput_fu_850_p3 = (!tmp_5_reg_1207.read()[0].is_01())? sc_lv<15>(): ((tmp_5_reg_1207.read()[0].to_bool())? tmp_1_fu_840_p2.read(): tmp_10_cast_fu_846_p1.read());
}

void doImgproc::thread_window_val_0_0_fu_707_p0() {
    window_val_0_0_fu_707_p0 = kernel_q0.read();
}

void doImgproc::thread_window_val_0_0_fu_707_p1() {
    window_val_0_0_fu_707_p1 =  (sc_lv<8>) (window_val_0_0_fu_707_p10.read());
}

void doImgproc::thread_window_val_0_0_fu_707_p10() {
    window_val_0_0_fu_707_p10 = esl_zext<16,8>(reg_517.read());
}

void doImgproc::thread_window_val_0_0_fu_707_p2() {
    window_val_0_0_fu_707_p2 = (!window_val_0_0_fu_707_p0.read().is_01() || !window_val_0_0_fu_707_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_0_0_fu_707_p0.read()) * sc_biguint<8>(window_val_0_0_fu_707_p1.read());
}

void doImgproc::thread_window_val_1_1_fu_693_p0() {
    window_val_1_1_fu_693_p0 = reg_513.read();
}

void doImgproc::thread_window_val_1_1_fu_693_p1() {
    window_val_1_1_fu_693_p1 =  (sc_lv<8>) (window_val_1_1_fu_693_p10.read());
}

void doImgproc::thread_window_val_1_1_fu_693_p10() {
    window_val_1_1_fu_693_p10 = esl_zext<16,8>(lineBuff_val_1_q0.read());
}

void doImgproc::thread_window_val_1_1_fu_693_p2() {
    window_val_1_1_fu_693_p2 = (!window_val_1_1_fu_693_p0.read().is_01() || !window_val_1_1_fu_693_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_1_1_fu_693_p0.read()) * sc_biguint<8>(window_val_1_1_fu_693_p1.read());
}

void doImgproc::thread_window_val_2_1_fu_728_p0() {
    window_val_2_1_fu_728_p0 = kernel_load_7_reg_1102.read();
}

void doImgproc::thread_window_val_2_1_fu_728_p1() {
    window_val_2_1_fu_728_p1 =  (sc_lv<8>) (window_val_2_1_fu_728_p10.read());
}

void doImgproc::thread_window_val_2_1_fu_728_p10() {
    window_val_2_1_fu_728_p10 = esl_zext<16,8>(reg_522.read());
}

void doImgproc::thread_window_val_2_1_fu_728_p2() {
    window_val_2_1_fu_728_p2 = (!window_val_2_1_fu_728_p0.read().is_01() || !window_val_2_1_fu_728_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(window_val_2_1_fu_728_p0.read()) * sc_biguint<8>(window_val_2_1_fu_728_p1.read());
}

void doImgproc::thread_window_val_2_2_fu_749_p0() {
    window_val_2_2_fu_749_p0 = reg_513.read();
}

void doImgproc::thread_window_val_2_2_fu_749_p1() {
    window_val_2_2_fu_749_p1 =  (sc_lv<8>) (window_val_2_2_fu_749_p10.read());
}

void doImgproc::thread_window_val_2_2_fu_749_p10() {
    window_val_2_2_fu_749_p10 = esl_zext<16,8>(reg_522.read());
}

void doImgproc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond1_fu_526_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond1_fu_526_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage2_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read())) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage5_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 128 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage6_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 256 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage7_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage8_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 2048 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read()) || esl_seteq<1,1,1>(outStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_885_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(outStream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void doImgproc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWVALID\" :  \"" << s_axi_KERNEL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWREADY\" :  \"" << s_axi_KERNEL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_AWADDR\" :  \"" << s_axi_KERNEL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WVALID\" :  \"" << s_axi_KERNEL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_WREADY\" :  \"" << s_axi_KERNEL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WDATA\" :  \"" << s_axi_KERNEL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_WSTRB\" :  \"" << s_axi_KERNEL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARVALID\" :  \"" << s_axi_KERNEL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARREADY\" :  \"" << s_axi_KERNEL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_ARADDR\" :  \"" << s_axi_KERNEL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RVALID\" :  \"" << s_axi_KERNEL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_RREADY\" :  \"" << s_axi_KERNEL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RDATA\" :  \"" << s_axi_KERNEL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_RRESP\" :  \"" << s_axi_KERNEL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_BVALID\" :  \"" << s_axi_KERNEL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_KERNEL_BUS_BREADY\" :  \"" << s_axi_KERNEL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_KERNEL_BUS_BRESP\" :  \"" << s_axi_KERNEL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

